/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api;

import org.datacite.ApiCallback;
import org.datacite.ApiClient;
import org.datacite.ApiException;
import org.datacite.ApiResponse;
import org.datacite.Configuration;
import org.datacite.Pair;
import org.datacite.ProgressRequestBody;
import org.datacite.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.datacite.api.model.Client;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ClientsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clientsGet
     * @param query  (optional)
     * @param year The year the client was created. (optional)
     * @param providerId  (optional)
     * @param software  (optional)
     * @param clientType  (optional)
     * @param repositoryType  (optional)
     * @param certificate  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clients. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsGetCall(String query, Integer year, String providerId, String software, String clientType, String repositoryType, String certificate, Integer pageNumber, Integer pageSize, String include, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider-id", providerId));
        }

        if (software != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("software", software));
        }

        if (clientType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client-type", clientType));
        }

        if (repositoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repository-type", repositoryType));
        }

        if (certificate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate", certificate));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsGetValidateBeforeCall(String query, Integer year, String providerId, String software, String clientType, String repositoryType, String certificate, Integer pageNumber, Integer pageSize, String include, String sort, final ApiCallback _callback) throws ApiException {
        return clientsGetCall(query, year, providerId, software, clientType, repositoryType, certificate, pageNumber, pageSize, include, sort, _callback);

    }

    /**
     * Return a list of clients (repositories).
     * 
     * @param query  (optional)
     * @param year The year the client was created. (optional)
     * @param providerId  (optional)
     * @param software  (optional)
     * @param clientType  (optional)
     * @param repositoryType  (optional)
     * @param certificate  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clients. </td><td>  -  </td></tr>
     </table>
     */
    public Client clientsGet(String query, Integer year, String providerId, String software, String clientType, String repositoryType, String certificate, Integer pageNumber, Integer pageSize, String include, String sort) throws ApiException {
        ApiResponse<Client> localVarResp = clientsGetWithHttpInfo(query, year, providerId, software, clientType, repositoryType, certificate, pageNumber, pageSize, include, sort);
        return localVarResp.getData();
    }

    /**
     * Return a list of clients (repositories).
     * 
     * @param query  (optional)
     * @param year The year the client was created. (optional)
     * @param providerId  (optional)
     * @param software  (optional)
     * @param clientType  (optional)
     * @param repositoryType  (optional)
     * @param certificate  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clients. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Client> clientsGetWithHttpInfo(String query, Integer year, String providerId, String software, String clientType, String repositoryType, String certificate, Integer pageNumber, Integer pageSize, String include, String sort) throws ApiException {
        okhttp3.Call localVarCall = clientsGetValidateBeforeCall(query, year, providerId, software, clientType, repositoryType, certificate, pageNumber, pageSize, include, sort, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of clients (repositories). (asynchronously)
     * 
     * @param query  (optional)
     * @param year The year the client was created. (optional)
     * @param providerId  (optional)
     * @param software  (optional)
     * @param clientType  (optional)
     * @param repositoryType  (optional)
     * @param certificate  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clients. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsGetAsync(String query, Integer year, String providerId, String software, String clientType, String repositoryType, String certificate, Integer pageNumber, Integer pageSize, String include, String sort, final ApiCallback<Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsGetValidateBeforeCall(query, year, providerId, software, clientType, repositoryType, certificate, pageNumber, pageSize, include, sort, _callback);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientsIdGet
     * @param id Client ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clientsIdGet(Async)");
        }

        return clientsIdGetCall(id, _callback);

    }

    /**
     * Return a client.
     * 
     * @param id Client ID (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public Client clientsIdGet(String id) throws ApiException {
        ApiResponse<Client> localVarResp = clientsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return a client.
     * 
     * @param id Client ID (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Client> clientsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = clientsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a client. (asynchronously)
     * 
     * @param id Client ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsIdGetAsync(String id, final ApiCallback<Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientsTotalsGet
     * @param providerId  (optional)
     * @param state  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clients stats. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsTotalsGetCall(String providerId, String state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/totals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider-id", providerId));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsTotalsGetValidateBeforeCall(String providerId, String state, final ApiCallback _callback) throws ApiException {
        return clientsTotalsGetCall(providerId, state, _callback);

    }

    /**
     * Return clients DOI production statistics.
     * 
     * @param providerId  (optional)
     * @param state  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clients stats. </td><td>  -  </td></tr>
     </table>
     */
    public void clientsTotalsGet(String providerId, String state) throws ApiException {
        clientsTotalsGetWithHttpInfo(providerId, state);
    }

    /**
     * Return clients DOI production statistics.
     * 
     * @param providerId  (optional)
     * @param state  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clients stats. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientsTotalsGetWithHttpInfo(String providerId, String state) throws ApiException {
        okhttp3.Call localVarCall = clientsTotalsGetValidateBeforeCall(providerId, state, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return clients DOI production statistics. (asynchronously)
     * 
     * @param providerId  (optional)
     * @param state  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clients stats. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsTotalsGetAsync(String providerId, String state, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsTotalsGetValidateBeforeCall(providerId, state, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
