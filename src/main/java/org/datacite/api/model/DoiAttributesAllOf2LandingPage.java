/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * Data describing the landing page, used by link checking.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiAttributesAllOf2LandingPage {
  public static final String SERIALIZED_NAME_CHECKED = "checked";
  @SerializedName(SERIALIZED_NAME_CHECKED)
  private String checked;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_REDIRECT_COUNT = "redirectCount";
  @SerializedName(SERIALIZED_NAME_REDIRECT_COUNT)
  private BigDecimal redirectCount;

  public static final String SERIALIZED_NAME_REDIRECT_URLS = "redirectUrls";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URLS)
  private List<String> redirectUrls = null;

  public static final String SERIALIZED_NAME_DOWNLOAD_LATENCY = "downloadLatency";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_LATENCY)
  private BigDecimal downloadLatency;

  public static final String SERIALIZED_NAME_HAS_SCHEMA_ORG = "hasSchemaOrg";
  @SerializedName(SERIALIZED_NAME_HAS_SCHEMA_ORG)
  private Boolean hasSchemaOrg;

  public static final String SERIALIZED_NAME_SCHEMA_ORGID = "schemaOrgid";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ORGID)
  private String schemaOrgid;

  public static final String SERIALIZED_NAME_DC_IDENTIFIER = "dcIdentifier";
  @SerializedName(SERIALIZED_NAME_DC_IDENTIFIER)
  private String dcIdentifier;

  public static final String SERIALIZED_NAME_CITATION_DOI = "citationDoi";
  @SerializedName(SERIALIZED_NAME_CITATION_DOI)
  private String citationDoi;

  public static final String SERIALIZED_NAME_BODYHAS_PID = "bodyhasPid";
  @SerializedName(SERIALIZED_NAME_BODYHAS_PID)
  private Boolean bodyhasPid;

  public DoiAttributesAllOf2LandingPage() {
  }

  public DoiAttributesAllOf2LandingPage checked(String checked) {
    
    this.checked = checked;
    return this;
  }

   /**
   * Get checked
   * @return checked
  **/
  @javax.annotation.Nullable

  public String getChecked() {
    return checked;
  }


  public void setChecked(String checked) {
    this.checked = checked;
  }


  public DoiAttributesAllOf2LandingPage url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public DoiAttributesAllOf2LandingPage contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @javax.annotation.Nullable

  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public DoiAttributesAllOf2LandingPage error(String error) {
    
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable

  public String getError() {
    return error;
  }


  public void setError(String error) {
    this.error = error;
  }


  public DoiAttributesAllOf2LandingPage redirectCount(BigDecimal redirectCount) {
    
    this.redirectCount = redirectCount;
    return this;
  }

   /**
   * Get redirectCount
   * @return redirectCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getRedirectCount() {
    return redirectCount;
  }


  public void setRedirectCount(BigDecimal redirectCount) {
    this.redirectCount = redirectCount;
  }


  public DoiAttributesAllOf2LandingPage redirectUrls(List<String> redirectUrls) {
    
    this.redirectUrls = redirectUrls;
    return this;
  }

  public DoiAttributesAllOf2LandingPage addRedirectUrlsItem(String redirectUrlsItem) {
    if (this.redirectUrls == null) {
      this.redirectUrls = new ArrayList<>();
    }
    this.redirectUrls.add(redirectUrlsItem);
    return this;
  }

   /**
   * Get redirectUrls
   * @return redirectUrls
  **/
  @javax.annotation.Nullable

  public List<String> getRedirectUrls() {
    return redirectUrls;
  }


  public void setRedirectUrls(List<String> redirectUrls) {
    this.redirectUrls = redirectUrls;
  }


  public DoiAttributesAllOf2LandingPage downloadLatency(BigDecimal downloadLatency) {
    
    this.downloadLatency = downloadLatency;
    return this;
  }

   /**
   * Get downloadLatency
   * @return downloadLatency
  **/
  @javax.annotation.Nullable

  public BigDecimal getDownloadLatency() {
    return downloadLatency;
  }


  public void setDownloadLatency(BigDecimal downloadLatency) {
    this.downloadLatency = downloadLatency;
  }


  public DoiAttributesAllOf2LandingPage hasSchemaOrg(Boolean hasSchemaOrg) {
    
    this.hasSchemaOrg = hasSchemaOrg;
    return this;
  }

   /**
   * Get hasSchemaOrg
   * @return hasSchemaOrg
  **/
  @javax.annotation.Nullable

  public Boolean getHasSchemaOrg() {
    return hasSchemaOrg;
  }


  public void setHasSchemaOrg(Boolean hasSchemaOrg) {
    this.hasSchemaOrg = hasSchemaOrg;
  }


  public DoiAttributesAllOf2LandingPage schemaOrgid(String schemaOrgid) {
    
    this.schemaOrgid = schemaOrgid;
    return this;
  }

   /**
   * Get schemaOrgid
   * @return schemaOrgid
  **/
  @javax.annotation.Nullable

  public String getSchemaOrgid() {
    return schemaOrgid;
  }


  public void setSchemaOrgid(String schemaOrgid) {
    this.schemaOrgid = schemaOrgid;
  }


  public DoiAttributesAllOf2LandingPage dcIdentifier(String dcIdentifier) {
    
    this.dcIdentifier = dcIdentifier;
    return this;
  }

   /**
   * Get dcIdentifier
   * @return dcIdentifier
  **/
  @javax.annotation.Nullable

  public String getDcIdentifier() {
    return dcIdentifier;
  }


  public void setDcIdentifier(String dcIdentifier) {
    this.dcIdentifier = dcIdentifier;
  }


  public DoiAttributesAllOf2LandingPage citationDoi(String citationDoi) {
    
    this.citationDoi = citationDoi;
    return this;
  }

   /**
   * Get citationDoi
   * @return citationDoi
  **/
  @javax.annotation.Nullable

  public String getCitationDoi() {
    return citationDoi;
  }


  public void setCitationDoi(String citationDoi) {
    this.citationDoi = citationDoi;
  }


  public DoiAttributesAllOf2LandingPage bodyhasPid(Boolean bodyhasPid) {
    
    this.bodyhasPid = bodyhasPid;
    return this;
  }

   /**
   * Get bodyhasPid
   * @return bodyhasPid
  **/
  @javax.annotation.Nullable

  public Boolean getBodyhasPid() {
    return bodyhasPid;
  }


  public void setBodyhasPid(Boolean bodyhasPid) {
    this.bodyhasPid = bodyhasPid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiAttributesAllOf2LandingPage doiAttributesAllOf2LandingPage = (DoiAttributesAllOf2LandingPage) o;
    return Objects.equals(this.checked, doiAttributesAllOf2LandingPage.checked) &&
        Objects.equals(this.url, doiAttributesAllOf2LandingPage.url) &&
        Objects.equals(this.contentType, doiAttributesAllOf2LandingPage.contentType) &&
        Objects.equals(this.error, doiAttributesAllOf2LandingPage.error) &&
        Objects.equals(this.redirectCount, doiAttributesAllOf2LandingPage.redirectCount) &&
        Objects.equals(this.redirectUrls, doiAttributesAllOf2LandingPage.redirectUrls) &&
        Objects.equals(this.downloadLatency, doiAttributesAllOf2LandingPage.downloadLatency) &&
        Objects.equals(this.hasSchemaOrg, doiAttributesAllOf2LandingPage.hasSchemaOrg) &&
        Objects.equals(this.schemaOrgid, doiAttributesAllOf2LandingPage.schemaOrgid) &&
        Objects.equals(this.dcIdentifier, doiAttributesAllOf2LandingPage.dcIdentifier) &&
        Objects.equals(this.citationDoi, doiAttributesAllOf2LandingPage.citationDoi) &&
        Objects.equals(this.bodyhasPid, doiAttributesAllOf2LandingPage.bodyhasPid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checked, url, contentType, error, redirectCount, redirectUrls, downloadLatency, hasSchemaOrg, schemaOrgid, dcIdentifier, citationDoi, bodyhasPid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiAttributesAllOf2LandingPage {\n");
    sb.append("    checked: ").append(toIndentedString(checked)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    redirectCount: ").append(toIndentedString(redirectCount)).append("\n");
    sb.append("    redirectUrls: ").append(toIndentedString(redirectUrls)).append("\n");
    sb.append("    downloadLatency: ").append(toIndentedString(downloadLatency)).append("\n");
    sb.append("    hasSchemaOrg: ").append(toIndentedString(hasSchemaOrg)).append("\n");
    sb.append("    schemaOrgid: ").append(toIndentedString(schemaOrgid)).append("\n");
    sb.append("    dcIdentifier: ").append(toIndentedString(dcIdentifier)).append("\n");
    sb.append("    citationDoi: ").append(toIndentedString(citationDoi)).append("\n");
    sb.append("    bodyhasPid: ").append(toIndentedString(bodyhasPid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checked");
    openapiFields.add("url");
    openapiFields.add("contentType");
    openapiFields.add("error");
    openapiFields.add("redirectCount");
    openapiFields.add("redirectUrls");
    openapiFields.add("downloadLatency");
    openapiFields.add("hasSchemaOrg");
    openapiFields.add("schemaOrgid");
    openapiFields.add("dcIdentifier");
    openapiFields.add("citationDoi");
    openapiFields.add("bodyhasPid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiAttributesAllOf2LandingPage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiAttributesAllOf2LandingPage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiAttributesAllOf2LandingPage is not found in the empty JSON string", DoiAttributesAllOf2LandingPage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiAttributesAllOf2LandingPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiAttributesAllOf2LandingPage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("checked") != null && !jsonObj.get("checked").isJsonNull()) && !jsonObj.get("checked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checked").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirectUrls") != null && !jsonObj.get("redirectUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrls` to be an array in the JSON string but got `%s`", jsonObj.get("redirectUrls").toString()));
      }
      if ((jsonObj.get("schemaOrgid") != null && !jsonObj.get("schemaOrgid").isJsonNull()) && !jsonObj.get("schemaOrgid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaOrgid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaOrgid").toString()));
      }
      if ((jsonObj.get("dcIdentifier") != null && !jsonObj.get("dcIdentifier").isJsonNull()) && !jsonObj.get("dcIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dcIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dcIdentifier").toString()));
      }
      if ((jsonObj.get("citationDoi") != null && !jsonObj.get("citationDoi").isJsonNull()) && !jsonObj.get("citationDoi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citationDoi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citationDoi").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiAttributesAllOf2LandingPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiAttributesAllOf2LandingPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiAttributesAllOf2LandingPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiAttributesAllOf2LandingPage.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiAttributesAllOf2LandingPage>() {
           @Override
           public void write(JsonWriter out, DoiAttributesAllOf2LandingPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiAttributesAllOf2LandingPage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiAttributesAllOf2LandingPage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiAttributesAllOf2LandingPage
  * @throws IOException if the JSON string is invalid with respect to DoiAttributesAllOf2LandingPage
  */
  public static DoiAttributesAllOf2LandingPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiAttributesAllOf2LandingPage.class);
  }

 /**
  * Convert an instance of DoiAttributesAllOf2LandingPage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

