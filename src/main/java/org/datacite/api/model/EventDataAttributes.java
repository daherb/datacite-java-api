/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * EventDataAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class EventDataAttributes {
  public static final String SERIALIZED_NAME_SUBJ_ID = "subjId";
  @SerializedName(SERIALIZED_NAME_SUBJ_ID)
  private String subjId;

  public static final String SERIALIZED_NAME_OBJ_ID = "objId";
  @SerializedName(SERIALIZED_NAME_OBJ_ID)
  private String objId;

  /**
   * Gets or Sets messageAction
   */
  @JsonAdapter(MessageActionEnum.Adapter.class)
  public enum MessageActionEnum {
    CREATE("create"),
    
    DELETE("delete");

    private String value;

    MessageActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageActionEnum fromValue(String value) {
      for (MessageActionEnum b : MessageActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_ACTION = "messageAction";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ACTION)
  private MessageActionEnum messageAction;

  public static final String SERIALIZED_NAME_RELATION_TYPE_ID = "relationTypeId";
  @SerializedName(SERIALIZED_NAME_RELATION_TYPE_ID)
  private String relationTypeId;

  public static final String SERIALIZED_NAME_SOURCE_TOKEN = "sourceToken";
  @SerializedName(SERIALIZED_NAME_SOURCE_TOKEN)
  private String sourceToken;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_OCCURED_AT = "occuredAt";
  @SerializedName(SERIALIZED_NAME_OCCURED_AT)
  private String occuredAt;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_SUBJ = "subj";
  @SerializedName(SERIALIZED_NAME_SUBJ)
  private Object subj;

  public static final String SERIALIZED_NAME_OBJ = "obj";
  @SerializedName(SERIALIZED_NAME_OBJ)
  private Object obj;

  public EventDataAttributes() {
  }

  public EventDataAttributes subjId(String subjId) {
    
    this.subjId = subjId;
    return this;
  }

   /**
   * Get subjId
   * @return subjId
  **/
  @javax.annotation.Nullable

  public String getSubjId() {
    return subjId;
  }


  public void setSubjId(String subjId) {
    this.subjId = subjId;
  }


  public EventDataAttributes objId(String objId) {
    
    this.objId = objId;
    return this;
  }

   /**
   * Get objId
   * @return objId
  **/
  @javax.annotation.Nullable

  public String getObjId() {
    return objId;
  }


  public void setObjId(String objId) {
    this.objId = objId;
  }


  public EventDataAttributes messageAction(MessageActionEnum messageAction) {
    
    this.messageAction = messageAction;
    return this;
  }

   /**
   * Get messageAction
   * @return messageAction
  **/
  @javax.annotation.Nullable

  public MessageActionEnum getMessageAction() {
    return messageAction;
  }


  public void setMessageAction(MessageActionEnum messageAction) {
    this.messageAction = messageAction;
  }


  public EventDataAttributes relationTypeId(String relationTypeId) {
    
    this.relationTypeId = relationTypeId;
    return this;
  }

   /**
   * Get relationTypeId
   * @return relationTypeId
  **/
  @javax.annotation.Nullable

  public String getRelationTypeId() {
    return relationTypeId;
  }


  public void setRelationTypeId(String relationTypeId) {
    this.relationTypeId = relationTypeId;
  }


  public EventDataAttributes sourceToken(String sourceToken) {
    
    this.sourceToken = sourceToken;
    return this;
  }

   /**
   * Get sourceToken
   * @return sourceToken
  **/
  @javax.annotation.Nullable

  public String getSourceToken() {
    return sourceToken;
  }


  public void setSourceToken(String sourceToken) {
    this.sourceToken = sourceToken;
  }


  public EventDataAttributes sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @javax.annotation.Nullable

  public String getSourceId() {
    return sourceId;
  }


  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public EventDataAttributes total(BigDecimal total) {
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable

  public BigDecimal getTotal() {
    return total;
  }


  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public EventDataAttributes license(String license) {
    
    this.license = license;
    return this;
  }

   /**
   * Get license
   * @return license
  **/
  @javax.annotation.Nullable

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    this.license = license;
  }


  public EventDataAttributes occuredAt(String occuredAt) {
    
    this.occuredAt = occuredAt;
    return this;
  }

   /**
   * Get occuredAt
   * @return occuredAt
  **/
  @javax.annotation.Nullable

  public String getOccuredAt() {
    return occuredAt;
  }


  public void setOccuredAt(String occuredAt) {
    this.occuredAt = occuredAt;
  }


  public EventDataAttributes timestamp(String timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable

  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public EventDataAttributes subj(Object subj) {
    
    this.subj = subj;
    return this;
  }

   /**
   * Get subj
   * @return subj
  **/
  @javax.annotation.Nullable

  public Object getSubj() {
    return subj;
  }


  public void setSubj(Object subj) {
    this.subj = subj;
  }


  public EventDataAttributes obj(Object obj) {
    
    this.obj = obj;
    return this;
  }

   /**
   * Get obj
   * @return obj
  **/
  @javax.annotation.Nullable

  public Object getObj() {
    return obj;
  }


  public void setObj(Object obj) {
    this.obj = obj;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDataAttributes eventDataAttributes = (EventDataAttributes) o;
    return Objects.equals(this.subjId, eventDataAttributes.subjId) &&
        Objects.equals(this.objId, eventDataAttributes.objId) &&
        Objects.equals(this.messageAction, eventDataAttributes.messageAction) &&
        Objects.equals(this.relationTypeId, eventDataAttributes.relationTypeId) &&
        Objects.equals(this.sourceToken, eventDataAttributes.sourceToken) &&
        Objects.equals(this.sourceId, eventDataAttributes.sourceId) &&
        Objects.equals(this.total, eventDataAttributes.total) &&
        Objects.equals(this.license, eventDataAttributes.license) &&
        Objects.equals(this.occuredAt, eventDataAttributes.occuredAt) &&
        Objects.equals(this.timestamp, eventDataAttributes.timestamp) &&
        Objects.equals(this.subj, eventDataAttributes.subj) &&
        Objects.equals(this.obj, eventDataAttributes.obj);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subjId, objId, messageAction, relationTypeId, sourceToken, sourceId, total, license, occuredAt, timestamp, subj, obj);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDataAttributes {\n");
    sb.append("    subjId: ").append(toIndentedString(subjId)).append("\n");
    sb.append("    objId: ").append(toIndentedString(objId)).append("\n");
    sb.append("    messageAction: ").append(toIndentedString(messageAction)).append("\n");
    sb.append("    relationTypeId: ").append(toIndentedString(relationTypeId)).append("\n");
    sb.append("    sourceToken: ").append(toIndentedString(sourceToken)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    occuredAt: ").append(toIndentedString(occuredAt)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    subj: ").append(toIndentedString(subj)).append("\n");
    sb.append("    obj: ").append(toIndentedString(obj)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subjId");
    openapiFields.add("objId");
    openapiFields.add("messageAction");
    openapiFields.add("relationTypeId");
    openapiFields.add("sourceToken");
    openapiFields.add("sourceId");
    openapiFields.add("total");
    openapiFields.add("license");
    openapiFields.add("occuredAt");
    openapiFields.add("timestamp");
    openapiFields.add("subj");
    openapiFields.add("obj");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventDataAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventDataAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventDataAttributes is not found in the empty JSON string", EventDataAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EventDataAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventDataAttributes` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("subjId") != null && !jsonObj.get("subjId").isJsonNull()) && !jsonObj.get("subjId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjId").toString()));
      }
      if ((jsonObj.get("objId") != null && !jsonObj.get("objId").isJsonNull()) && !jsonObj.get("objId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objId").toString()));
      }
      if ((jsonObj.get("messageAction") != null && !jsonObj.get("messageAction").isJsonNull()) && !jsonObj.get("messageAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageAction").toString()));
      }
      if ((jsonObj.get("relationTypeId") != null && !jsonObj.get("relationTypeId").isJsonNull()) && !jsonObj.get("relationTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationTypeId").toString()));
      }
      if ((jsonObj.get("sourceToken") != null && !jsonObj.get("sourceToken").isJsonNull()) && !jsonObj.get("sourceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceToken").toString()));
      }
      if ((jsonObj.get("sourceId") != null && !jsonObj.get("sourceId").isJsonNull()) && !jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("occuredAt") != null && !jsonObj.get("occuredAt").isJsonNull()) && !jsonObj.get("occuredAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occuredAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occuredAt").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventDataAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventDataAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventDataAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventDataAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<EventDataAttributes>() {
           @Override
           public void write(JsonWriter out, EventDataAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventDataAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventDataAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventDataAttributes
  * @throws IOException if the JSON string is invalid with respect to EventDataAttributes
  */
  public static EventDataAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventDataAttributes.class);
  }

 /**
  * Convert an instance of EventDataAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

