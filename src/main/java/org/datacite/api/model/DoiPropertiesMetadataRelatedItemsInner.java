/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.datacite.api.model.DoiPropertiesMetadataRelatedItemsInnerContributorsInner;
import org.datacite.api.model.DoiPropertiesMetadataRelatedItemsInnerCreatorsInner;
import org.datacite.api.model.DoiPropertiesMetadataRelatedItemsInnerRelatedItemIdentifier;
import org.datacite.api.model.DoiPropertiesMetadataRelatedItemsInnerTitlesInner;
import org.datacite.api.model.RelationType;
import org.datacite.api.model.ResourceTypeGeneral;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiPropertiesMetadataRelatedItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiPropertiesMetadataRelatedItemsInner {
  public static final String SERIALIZED_NAME_RELATED_ITEM_TYPE = "relatedItemType";
  @SerializedName(SERIALIZED_NAME_RELATED_ITEM_TYPE)
  private ResourceTypeGeneral relatedItemType;

  public static final String SERIALIZED_NAME_RELATION_TYPE = "relationType";
  @SerializedName(SERIALIZED_NAME_RELATION_TYPE)
  private RelationType relationType;

  public static final String SERIALIZED_NAME_RELATED_ITEM_IDENTIFIER = "relatedItemIdentifier";
  @SerializedName(SERIALIZED_NAME_RELATED_ITEM_IDENTIFIER)
  private DoiPropertiesMetadataRelatedItemsInnerRelatedItemIdentifier relatedItemIdentifier;

  public static final String SERIALIZED_NAME_CREATORS = "creators";
  @SerializedName(SERIALIZED_NAME_CREATORS)
  private List<DoiPropertiesMetadataRelatedItemsInnerCreatorsInner> creators = null;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private List<DoiPropertiesMetadataRelatedItemsInnerTitlesInner> titles = null;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private String volume;

  public static final String SERIALIZED_NAME_ISSUE = "issue";
  @SerializedName(SERIALIZED_NAME_ISSUE)
  private String issue;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  /**
   * Gets or Sets numberType
   */
  @JsonAdapter(NumberTypeEnum.Adapter.class)
  public enum NumberTypeEnum {
    ARTICLE("Article"),
    
    CHAPTER("Chapter"),
    
    REPORT("Report"),
    
    OTHER("Other");

    private String value;

    NumberTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumberTypeEnum fromValue(String value) {
      for (NumberTypeEnum b : NumberTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NumberTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumberTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumberTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NumberTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NUMBER_TYPE = "numberType";
  @SerializedName(SERIALIZED_NAME_NUMBER_TYPE)
  private NumberTypeEnum numberType;

  public static final String SERIALIZED_NAME_FIRST_PAGE = "firstPage";
  @SerializedName(SERIALIZED_NAME_FIRST_PAGE)
  private String firstPage;

  public static final String SERIALIZED_NAME_LAST_PAGE = "lastPage";
  @SerializedName(SERIALIZED_NAME_LAST_PAGE)
  private String lastPage;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_PUBLICATION_YEAR = "publicationYear";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_YEAR)
  private String publicationYear;

  public static final String SERIALIZED_NAME_EDITION = "edition";
  @SerializedName(SERIALIZED_NAME_EDITION)
  private String edition;

  public static final String SERIALIZED_NAME_CONTRIBUTORS = "contributors";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS)
  private List<DoiPropertiesMetadataRelatedItemsInnerContributorsInner> contributors = null;

  public DoiPropertiesMetadataRelatedItemsInner() {
  }

  public DoiPropertiesMetadataRelatedItemsInner relatedItemType(ResourceTypeGeneral relatedItemType) {
    
    this.relatedItemType = relatedItemType;
    return this;
  }

   /**
   * Get relatedItemType
   * @return relatedItemType
  **/
  @javax.annotation.Nonnull

  public ResourceTypeGeneral getRelatedItemType() {
    return relatedItemType;
  }


  public void setRelatedItemType(ResourceTypeGeneral relatedItemType) {
    this.relatedItemType = relatedItemType;
  }


  public DoiPropertiesMetadataRelatedItemsInner relationType(RelationType relationType) {
    
    this.relationType = relationType;
    return this;
  }

   /**
   * Get relationType
   * @return relationType
  **/
  @javax.annotation.Nonnull

  public RelationType getRelationType() {
    return relationType;
  }


  public void setRelationType(RelationType relationType) {
    this.relationType = relationType;
  }


  public DoiPropertiesMetadataRelatedItemsInner relatedItemIdentifier(DoiPropertiesMetadataRelatedItemsInnerRelatedItemIdentifier relatedItemIdentifier) {
    
    this.relatedItemIdentifier = relatedItemIdentifier;
    return this;
  }

   /**
   * Get relatedItemIdentifier
   * @return relatedItemIdentifier
  **/
  @javax.annotation.Nullable

  public DoiPropertiesMetadataRelatedItemsInnerRelatedItemIdentifier getRelatedItemIdentifier() {
    return relatedItemIdentifier;
  }


  public void setRelatedItemIdentifier(DoiPropertiesMetadataRelatedItemsInnerRelatedItemIdentifier relatedItemIdentifier) {
    this.relatedItemIdentifier = relatedItemIdentifier;
  }


  public DoiPropertiesMetadataRelatedItemsInner creators(List<DoiPropertiesMetadataRelatedItemsInnerCreatorsInner> creators) {
    
    this.creators = creators;
    return this;
  }

  public DoiPropertiesMetadataRelatedItemsInner addCreatorsItem(DoiPropertiesMetadataRelatedItemsInnerCreatorsInner creatorsItem) {
    if (this.creators == null) {
      this.creators = new ArrayList<>();
    }
    this.creators.add(creatorsItem);
    return this;
  }

   /**
   * Get creators
   * @return creators
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataRelatedItemsInnerCreatorsInner> getCreators() {
    return creators;
  }


  public void setCreators(List<DoiPropertiesMetadataRelatedItemsInnerCreatorsInner> creators) {
    this.creators = creators;
  }


  public DoiPropertiesMetadataRelatedItemsInner titles(List<DoiPropertiesMetadataRelatedItemsInnerTitlesInner> titles) {
    
    this.titles = titles;
    return this;
  }

  public DoiPropertiesMetadataRelatedItemsInner addTitlesItem(DoiPropertiesMetadataRelatedItemsInnerTitlesInner titlesItem) {
    if (this.titles == null) {
      this.titles = new ArrayList<>();
    }
    this.titles.add(titlesItem);
    return this;
  }

   /**
   * Get titles
   * @return titles
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataRelatedItemsInnerTitlesInner> getTitles() {
    return titles;
  }


  public void setTitles(List<DoiPropertiesMetadataRelatedItemsInnerTitlesInner> titles) {
    this.titles = titles;
  }


  public DoiPropertiesMetadataRelatedItemsInner volume(String volume) {
    
    this.volume = volume;
    return this;
  }

   /**
   * Get volume
   * @return volume
  **/
  @javax.annotation.Nullable

  public String getVolume() {
    return volume;
  }


  public void setVolume(String volume) {
    this.volume = volume;
  }


  public DoiPropertiesMetadataRelatedItemsInner issue(String issue) {
    
    this.issue = issue;
    return this;
  }

   /**
   * Get issue
   * @return issue
  **/
  @javax.annotation.Nullable

  public String getIssue() {
    return issue;
  }


  public void setIssue(String issue) {
    this.issue = issue;
  }


  public DoiPropertiesMetadataRelatedItemsInner number(String number) {
    
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nullable

  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    this.number = number;
  }


  public DoiPropertiesMetadataRelatedItemsInner numberType(NumberTypeEnum numberType) {
    
    this.numberType = numberType;
    return this;
  }

   /**
   * Get numberType
   * @return numberType
  **/
  @javax.annotation.Nullable

  public NumberTypeEnum getNumberType() {
    return numberType;
  }


  public void setNumberType(NumberTypeEnum numberType) {
    this.numberType = numberType;
  }


  public DoiPropertiesMetadataRelatedItemsInner firstPage(String firstPage) {
    
    this.firstPage = firstPage;
    return this;
  }

   /**
   * Get firstPage
   * @return firstPage
  **/
  @javax.annotation.Nullable

  public String getFirstPage() {
    return firstPage;
  }


  public void setFirstPage(String firstPage) {
    this.firstPage = firstPage;
  }


  public DoiPropertiesMetadataRelatedItemsInner lastPage(String lastPage) {
    
    this.lastPage = lastPage;
    return this;
  }

   /**
   * Get lastPage
   * @return lastPage
  **/
  @javax.annotation.Nullable

  public String getLastPage() {
    return lastPage;
  }


  public void setLastPage(String lastPage) {
    this.lastPage = lastPage;
  }


  public DoiPropertiesMetadataRelatedItemsInner publisher(String publisher) {
    
    this.publisher = publisher;
    return this;
  }

   /**
   * Get publisher
   * @return publisher
  **/
  @javax.annotation.Nullable

  public String getPublisher() {
    return publisher;
  }


  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public DoiPropertiesMetadataRelatedItemsInner publicationYear(String publicationYear) {
    
    this.publicationYear = publicationYear;
    return this;
  }

   /**
   * Get publicationYear
   * @return publicationYear
  **/
  @javax.annotation.Nullable

  public String getPublicationYear() {
    return publicationYear;
  }


  public void setPublicationYear(String publicationYear) {
    this.publicationYear = publicationYear;
  }


  public DoiPropertiesMetadataRelatedItemsInner edition(String edition) {
    
    this.edition = edition;
    return this;
  }

   /**
   * Get edition
   * @return edition
  **/
  @javax.annotation.Nullable

  public String getEdition() {
    return edition;
  }


  public void setEdition(String edition) {
    this.edition = edition;
  }


  public DoiPropertiesMetadataRelatedItemsInner contributors(List<DoiPropertiesMetadataRelatedItemsInnerContributorsInner> contributors) {
    
    this.contributors = contributors;
    return this;
  }

  public DoiPropertiesMetadataRelatedItemsInner addContributorsItem(DoiPropertiesMetadataRelatedItemsInnerContributorsInner contributorsItem) {
    if (this.contributors == null) {
      this.contributors = new ArrayList<>();
    }
    this.contributors.add(contributorsItem);
    return this;
  }

   /**
   * Get contributors
   * @return contributors
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataRelatedItemsInnerContributorsInner> getContributors() {
    return contributors;
  }


  public void setContributors(List<DoiPropertiesMetadataRelatedItemsInnerContributorsInner> contributors) {
    this.contributors = contributors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiPropertiesMetadataRelatedItemsInner doiPropertiesMetadataRelatedItemsInner = (DoiPropertiesMetadataRelatedItemsInner) o;
    return Objects.equals(this.relatedItemType, doiPropertiesMetadataRelatedItemsInner.relatedItemType) &&
        Objects.equals(this.relationType, doiPropertiesMetadataRelatedItemsInner.relationType) &&
        Objects.equals(this.relatedItemIdentifier, doiPropertiesMetadataRelatedItemsInner.relatedItemIdentifier) &&
        Objects.equals(this.creators, doiPropertiesMetadataRelatedItemsInner.creators) &&
        Objects.equals(this.titles, doiPropertiesMetadataRelatedItemsInner.titles) &&
        Objects.equals(this.volume, doiPropertiesMetadataRelatedItemsInner.volume) &&
        Objects.equals(this.issue, doiPropertiesMetadataRelatedItemsInner.issue) &&
        Objects.equals(this.number, doiPropertiesMetadataRelatedItemsInner.number) &&
        Objects.equals(this.numberType, doiPropertiesMetadataRelatedItemsInner.numberType) &&
        Objects.equals(this.firstPage, doiPropertiesMetadataRelatedItemsInner.firstPage) &&
        Objects.equals(this.lastPage, doiPropertiesMetadataRelatedItemsInner.lastPage) &&
        Objects.equals(this.publisher, doiPropertiesMetadataRelatedItemsInner.publisher) &&
        Objects.equals(this.publicationYear, doiPropertiesMetadataRelatedItemsInner.publicationYear) &&
        Objects.equals(this.edition, doiPropertiesMetadataRelatedItemsInner.edition) &&
        Objects.equals(this.contributors, doiPropertiesMetadataRelatedItemsInner.contributors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relatedItemType, relationType, relatedItemIdentifier, creators, titles, volume, issue, number, numberType, firstPage, lastPage, publisher, publicationYear, edition, contributors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiPropertiesMetadataRelatedItemsInner {\n");
    sb.append("    relatedItemType: ").append(toIndentedString(relatedItemType)).append("\n");
    sb.append("    relationType: ").append(toIndentedString(relationType)).append("\n");
    sb.append("    relatedItemIdentifier: ").append(toIndentedString(relatedItemIdentifier)).append("\n");
    sb.append("    creators: ").append(toIndentedString(creators)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    numberType: ").append(toIndentedString(numberType)).append("\n");
    sb.append("    firstPage: ").append(toIndentedString(firstPage)).append("\n");
    sb.append("    lastPage: ").append(toIndentedString(lastPage)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    publicationYear: ").append(toIndentedString(publicationYear)).append("\n");
    sb.append("    edition: ").append(toIndentedString(edition)).append("\n");
    sb.append("    contributors: ").append(toIndentedString(contributors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("relatedItemType");
    openapiFields.add("relationType");
    openapiFields.add("relatedItemIdentifier");
    openapiFields.add("creators");
    openapiFields.add("titles");
    openapiFields.add("volume");
    openapiFields.add("issue");
    openapiFields.add("number");
    openapiFields.add("numberType");
    openapiFields.add("firstPage");
    openapiFields.add("lastPage");
    openapiFields.add("publisher");
    openapiFields.add("publicationYear");
    openapiFields.add("edition");
    openapiFields.add("contributors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("relatedItemType");
    openapiRequiredFields.add("relationType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiPropertiesMetadataRelatedItemsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiPropertiesMetadataRelatedItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiPropertiesMetadataRelatedItemsInner is not found in the empty JSON string", DoiPropertiesMetadataRelatedItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiPropertiesMetadataRelatedItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiPropertiesMetadataRelatedItemsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DoiPropertiesMetadataRelatedItemsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `relatedItemIdentifier`
      if (jsonObj.get("relatedItemIdentifier") != null && !jsonObj.get("relatedItemIdentifier").isJsonNull()) {
        DoiPropertiesMetadataRelatedItemsInnerRelatedItemIdentifier.validateJsonObject(jsonObj.getAsJsonObject("relatedItemIdentifier"));
      }
      if (jsonObj.get("creators") != null && !jsonObj.get("creators").isJsonNull()) {
        JsonArray jsonArraycreators = jsonObj.getAsJsonArray("creators");
        if (jsonArraycreators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creators` to be an array in the JSON string but got `%s`", jsonObj.get("creators").toString()));
          }

          // validate the optional field `creators` (array)
          for (int i = 0; i < jsonArraycreators.size(); i++) {
            DoiPropertiesMetadataRelatedItemsInnerCreatorsInner.validateJsonObject(jsonArraycreators.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("titles") != null && !jsonObj.get("titles").isJsonNull()) {
        JsonArray jsonArraytitles = jsonObj.getAsJsonArray("titles");
        if (jsonArraytitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("titles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `titles` to be an array in the JSON string but got `%s`", jsonObj.get("titles").toString()));
          }

          // validate the optional field `titles` (array)
          for (int i = 0; i < jsonArraytitles.size(); i++) {
            DoiPropertiesMetadataRelatedItemsInnerTitlesInner.validateJsonObject(jsonArraytitles.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("volume") != null && !jsonObj.get("volume").isJsonNull()) && !jsonObj.get("volume").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volume` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volume").toString()));
      }
      if ((jsonObj.get("issue") != null && !jsonObj.get("issue").isJsonNull()) && !jsonObj.get("issue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("numberType") != null && !jsonObj.get("numberType").isJsonNull()) && !jsonObj.get("numberType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberType").toString()));
      }
      if ((jsonObj.get("firstPage") != null && !jsonObj.get("firstPage").isJsonNull()) && !jsonObj.get("firstPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstPage").toString()));
      }
      if ((jsonObj.get("lastPage") != null && !jsonObj.get("lastPage").isJsonNull()) && !jsonObj.get("lastPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastPage").toString()));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if ((jsonObj.get("publicationYear") != null && !jsonObj.get("publicationYear").isJsonNull()) && !jsonObj.get("publicationYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicationYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicationYear").toString()));
      }
      if ((jsonObj.get("edition") != null && !jsonObj.get("edition").isJsonNull()) && !jsonObj.get("edition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edition").toString()));
      }
      if (jsonObj.get("contributors") != null && !jsonObj.get("contributors").isJsonNull()) {
        JsonArray jsonArraycontributors = jsonObj.getAsJsonArray("contributors");
        if (jsonArraycontributors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contributors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contributors` to be an array in the JSON string but got `%s`", jsonObj.get("contributors").toString()));
          }

          // validate the optional field `contributors` (array)
          for (int i = 0; i < jsonArraycontributors.size(); i++) {
            DoiPropertiesMetadataRelatedItemsInnerContributorsInner.validateJsonObject(jsonArraycontributors.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiPropertiesMetadataRelatedItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiPropertiesMetadataRelatedItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiPropertiesMetadataRelatedItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiPropertiesMetadataRelatedItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiPropertiesMetadataRelatedItemsInner>() {
           @Override
           public void write(JsonWriter out, DoiPropertiesMetadataRelatedItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiPropertiesMetadataRelatedItemsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiPropertiesMetadataRelatedItemsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiPropertiesMetadataRelatedItemsInner
  * @throws IOException if the JSON string is invalid with respect to DoiPropertiesMetadataRelatedItemsInner
  */
  public static DoiPropertiesMetadataRelatedItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiPropertiesMetadataRelatedItemsInner.class);
  }

 /**
  * Convert an instance of DoiPropertiesMetadataRelatedItemsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

