/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets relationType
 */
@JsonAdapter(RelationType.Adapter.class)
public enum RelationType {
  
  ISCITEDBY("IsCitedBy"),
  
  CITES("Cites"),
  
  ISSUPPLEMENTTO("IsSupplementTo"),
  
  ISSUPPLEMENTEDBY("IsSupplementedBy"),
  
  ISCONTINUEDBY("IsContinuedBy"),
  
  CONTINUES("Continues"),
  
  ISDESCRIBEDBY("IsDescribedBy"),
  
  DESCRIBES("Describes"),
  
  HASMETADATA("HasMetadata"),
  
  ISMETADATAFOR("IsMetadataFor"),
  
  HASVERSION("HasVersion"),
  
  ISVERSIONOF("IsVersionOf"),
  
  ISNEWVERSIONOF("IsNewVersionOf"),
  
  ISPREVIOUSVERSIONOF("IsPreviousVersionOf"),
  
  ISPARTOF("IsPartOf"),
  
  HASPART("HasPart"),
  
  ISPUBLISHEDIN("IsPublishedIn"),
  
  ISREFERENCEDBY("IsReferencedBy"),
  
  REFERENCES("References"),
  
  ISDOCUMENTEDBY("IsDocumentedBy"),
  
  DOCUMENTS("Documents"),
  
  ISCOMPILEDBY("IsCompiledBy"),
  
  COMPILES("Compiles"),
  
  ISVARIANTFORMOF("IsVariantFormOf"),
  
  ISORIGINALFORMOF("IsOriginalFormOf"),
  
  ISIDENTICALTO("IsIdenticalTo"),
  
  ISREVIEWEDBY("IsReviewedBy"),
  
  REVIEWS("Reviews"),
  
  ISDERIVEDFROM("IsDerivedFrom"),
  
  ISSOURCEOF("IsSourceOf"),
  
  ISREQUIREDBY("IsRequiredBy"),
  
  REQUIRES("Requires"),
  
  ISOBSOLETEDBY("IsObsoletedBy"),
  
  OBSOLETES("Obsoletes");

  private String value;

  RelationType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static RelationType fromValue(String value) {
    for (RelationType b : RelationType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<RelationType> {
    @Override
    public void write(final JsonWriter jsonWriter, final RelationType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public RelationType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return RelationType.fromValue(value);
    }
  }
}

