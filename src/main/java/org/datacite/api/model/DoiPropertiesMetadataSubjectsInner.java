/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiPropertiesMetadataSubjectsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiPropertiesMetadataSubjectsInner {
  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_SUBJECT_SCHEME = "subjectScheme";
  @SerializedName(SERIALIZED_NAME_SUBJECT_SCHEME)
  private String subjectScheme;

  public static final String SERIALIZED_NAME_SCHEME_URI = "schemeUri";
  @SerializedName(SERIALIZED_NAME_SCHEME_URI)
  private String schemeUri;

  public static final String SERIALIZED_NAME_VALUE_URI = "valueUri";
  @SerializedName(SERIALIZED_NAME_VALUE_URI)
  private String valueUri;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_CLASSIFICATION_CODE = "classificationCode";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_CODE)
  private String classificationCode;

  public DoiPropertiesMetadataSubjectsInner() {
  }

  public DoiPropertiesMetadataSubjectsInner subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nullable

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public DoiPropertiesMetadataSubjectsInner subjectScheme(String subjectScheme) {
    
    this.subjectScheme = subjectScheme;
    return this;
  }

   /**
   * Get subjectScheme
   * @return subjectScheme
  **/
  @javax.annotation.Nullable

  public String getSubjectScheme() {
    return subjectScheme;
  }


  public void setSubjectScheme(String subjectScheme) {
    this.subjectScheme = subjectScheme;
  }


  public DoiPropertiesMetadataSubjectsInner schemeUri(String schemeUri) {
    
    this.schemeUri = schemeUri;
    return this;
  }

   /**
   * Get schemeUri
   * @return schemeUri
  **/
  @javax.annotation.Nullable

  public String getSchemeUri() {
    return schemeUri;
  }


  public void setSchemeUri(String schemeUri) {
    this.schemeUri = schemeUri;
  }


  public DoiPropertiesMetadataSubjectsInner valueUri(String valueUri) {
    
    this.valueUri = valueUri;
    return this;
  }

   /**
   * Get valueUri
   * @return valueUri
  **/
  @javax.annotation.Nullable

  public String getValueUri() {
    return valueUri;
  }


  public void setValueUri(String valueUri) {
    this.valueUri = valueUri;
  }


  public DoiPropertiesMetadataSubjectsInner lang(String lang) {
    
    this.lang = lang;
    return this;
  }

   /**
   * Get lang
   * @return lang
  **/
  @javax.annotation.Nullable

  public String getLang() {
    return lang;
  }


  public void setLang(String lang) {
    this.lang = lang;
  }


  public DoiPropertiesMetadataSubjectsInner classificationCode(String classificationCode) {
    
    this.classificationCode = classificationCode;
    return this;
  }

   /**
   * Get classificationCode
   * @return classificationCode
  **/
  @javax.annotation.Nullable

  public String getClassificationCode() {
    return classificationCode;
  }


  public void setClassificationCode(String classificationCode) {
    this.classificationCode = classificationCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiPropertiesMetadataSubjectsInner doiPropertiesMetadataSubjectsInner = (DoiPropertiesMetadataSubjectsInner) o;
    return Objects.equals(this.subject, doiPropertiesMetadataSubjectsInner.subject) &&
        Objects.equals(this.subjectScheme, doiPropertiesMetadataSubjectsInner.subjectScheme) &&
        Objects.equals(this.schemeUri, doiPropertiesMetadataSubjectsInner.schemeUri) &&
        Objects.equals(this.valueUri, doiPropertiesMetadataSubjectsInner.valueUri) &&
        Objects.equals(this.lang, doiPropertiesMetadataSubjectsInner.lang) &&
        Objects.equals(this.classificationCode, doiPropertiesMetadataSubjectsInner.classificationCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, subjectScheme, schemeUri, valueUri, lang, classificationCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiPropertiesMetadataSubjectsInner {\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    subjectScheme: ").append(toIndentedString(subjectScheme)).append("\n");
    sb.append("    schemeUri: ").append(toIndentedString(schemeUri)).append("\n");
    sb.append("    valueUri: ").append(toIndentedString(valueUri)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    classificationCode: ").append(toIndentedString(classificationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subject");
    openapiFields.add("subjectScheme");
    openapiFields.add("schemeUri");
    openapiFields.add("valueUri");
    openapiFields.add("lang");
    openapiFields.add("classificationCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiPropertiesMetadataSubjectsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiPropertiesMetadataSubjectsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiPropertiesMetadataSubjectsInner is not found in the empty JSON string", DoiPropertiesMetadataSubjectsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiPropertiesMetadataSubjectsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiPropertiesMetadataSubjectsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("subjectScheme") != null && !jsonObj.get("subjectScheme").isJsonNull()) && !jsonObj.get("subjectScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectScheme").toString()));
      }
      if ((jsonObj.get("schemeUri") != null && !jsonObj.get("schemeUri").isJsonNull()) && !jsonObj.get("schemeUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemeUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemeUri").toString()));
      }
      if ((jsonObj.get("valueUri") != null && !jsonObj.get("valueUri").isJsonNull()) && !jsonObj.get("valueUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueUri").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("classificationCode") != null && !jsonObj.get("classificationCode").isJsonNull()) && !jsonObj.get("classificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classificationCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiPropertiesMetadataSubjectsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiPropertiesMetadataSubjectsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiPropertiesMetadataSubjectsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiPropertiesMetadataSubjectsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiPropertiesMetadataSubjectsInner>() {
           @Override
           public void write(JsonWriter out, DoiPropertiesMetadataSubjectsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiPropertiesMetadataSubjectsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiPropertiesMetadataSubjectsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiPropertiesMetadataSubjectsInner
  * @throws IOException if the JSON string is invalid with respect to DoiPropertiesMetadataSubjectsInner
  */
  public static DoiPropertiesMetadataSubjectsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiPropertiesMetadataSubjectsInner.class);
  }

 /**
  * Convert an instance of DoiPropertiesMetadataSubjectsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

