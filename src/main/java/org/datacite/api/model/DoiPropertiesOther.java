/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiPropertiesOther
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiPropertiesOther {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_CONTENT_URL = "contentUrl";
  @SerializedName(SERIALIZED_NAME_CONTENT_URL)
  private List<String> contentUrl = null;

  public static final String SERIALIZED_NAME_METADATA_VERSION = "metadataVersion";
  @SerializedName(SERIALIZED_NAME_METADATA_VERSION)
  private BigDecimal metadataVersion;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public DoiPropertiesOther() {
  }

  
  public DoiPropertiesOther(
     BigDecimal metadataVersion, 
     String source, 
     Boolean isActive, 
     String state, 
     String reason
  ) {
    this();
    this.metadataVersion = metadataVersion;
    this.source = source;
    this.isActive = isActive;
    this.state = state;
    this.reason = reason;
  }

  public DoiPropertiesOther url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public DoiPropertiesOther contentUrl(List<String> contentUrl) {
    
    this.contentUrl = contentUrl;
    return this;
  }

  public DoiPropertiesOther addContentUrlItem(String contentUrlItem) {
    if (this.contentUrl == null) {
      this.contentUrl = new ArrayList<>();
    }
    this.contentUrl.add(contentUrlItem);
    return this;
  }

   /**
   * Get contentUrl
   * @return contentUrl
  **/
  @javax.annotation.Nullable

  public List<String> getContentUrl() {
    return contentUrl;
  }


  public void setContentUrl(List<String> contentUrl) {
    this.contentUrl = contentUrl;
  }


   /**
   * Get metadataVersion
   * @return metadataVersion
  **/
  @javax.annotation.Nullable

  public BigDecimal getMetadataVersion() {
    return metadataVersion;
  }




  public DoiPropertiesOther schemaVersion(String schemaVersion) {
    
    this.schemaVersion = schemaVersion;
    return this;
  }

   /**
   * Get schemaVersion
   * @return schemaVersion
  **/
  @javax.annotation.Nullable

  public String getSchemaVersion() {
    return schemaVersion;
  }


  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable

  public String getSource() {
    return source;
  }




   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable

  public Boolean getIsActive() {
    return isActive;
  }




   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable

  public String getState() {
    return state;
  }




   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable

  public String getReason() {
    return reason;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiPropertiesOther doiPropertiesOther = (DoiPropertiesOther) o;
    return Objects.equals(this.url, doiPropertiesOther.url) &&
        Objects.equals(this.contentUrl, doiPropertiesOther.contentUrl) &&
        Objects.equals(this.metadataVersion, doiPropertiesOther.metadataVersion) &&
        Objects.equals(this.schemaVersion, doiPropertiesOther.schemaVersion) &&
        Objects.equals(this.source, doiPropertiesOther.source) &&
        Objects.equals(this.isActive, doiPropertiesOther.isActive) &&
        Objects.equals(this.state, doiPropertiesOther.state) &&
        Objects.equals(this.reason, doiPropertiesOther.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, contentUrl, metadataVersion, schemaVersion, source, isActive, state, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiPropertiesOther {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    contentUrl: ").append(toIndentedString(contentUrl)).append("\n");
    sb.append("    metadataVersion: ").append(toIndentedString(metadataVersion)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("contentUrl");
    openapiFields.add("metadataVersion");
    openapiFields.add("schemaVersion");
    openapiFields.add("source");
    openapiFields.add("isActive");
    openapiFields.add("state");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiPropertiesOther
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiPropertiesOther.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiPropertiesOther is not found in the empty JSON string", DoiPropertiesOther.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiPropertiesOther.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiPropertiesOther` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contentUrl") != null && !jsonObj.get("contentUrl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentUrl` to be an array in the JSON string but got `%s`", jsonObj.get("contentUrl").toString()));
      }
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiPropertiesOther.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiPropertiesOther' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiPropertiesOther> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiPropertiesOther.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiPropertiesOther>() {
           @Override
           public void write(JsonWriter out, DoiPropertiesOther value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiPropertiesOther read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiPropertiesOther given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiPropertiesOther
  * @throws IOException if the JSON string is invalid with respect to DoiPropertiesOther
  */
  public static DoiPropertiesOther fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiPropertiesOther.class);
  }

 /**
  * Convert an instance of DoiPropertiesOther to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

