/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.datacite.api.model.ResourceTypeGeneral;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiPropertiesMetadataTypes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiPropertiesMetadataTypes {
  public static final String SERIALIZED_NAME_RESOURCE_TYPE_GENERAL = "resourceTypeGeneral";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE_GENERAL)
  private ResourceTypeGeneral resourceTypeGeneral;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_SCHEMA_ORG = "schemaOrg";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ORG)
  private String schemaOrg;

  public static final String SERIALIZED_NAME_BIBTEX = "bibtex";
  @SerializedName(SERIALIZED_NAME_BIBTEX)
  private String bibtex;

  public static final String SERIALIZED_NAME_CITEPROC = "citeproc";
  @SerializedName(SERIALIZED_NAME_CITEPROC)
  private String citeproc;

  public static final String SERIALIZED_NAME_RIS = "ris";
  @SerializedName(SERIALIZED_NAME_RIS)
  private String ris;

  public DoiPropertiesMetadataTypes() {
  }

  public DoiPropertiesMetadataTypes resourceTypeGeneral(ResourceTypeGeneral resourceTypeGeneral) {
    
    this.resourceTypeGeneral = resourceTypeGeneral;
    return this;
  }

   /**
   * Get resourceTypeGeneral
   * @return resourceTypeGeneral
  **/
  @javax.annotation.Nonnull

  public ResourceTypeGeneral getResourceTypeGeneral() {
    return resourceTypeGeneral;
  }


  public void setResourceTypeGeneral(ResourceTypeGeneral resourceTypeGeneral) {
    this.resourceTypeGeneral = resourceTypeGeneral;
  }


  public DoiPropertiesMetadataTypes resourceType(String resourceType) {
    
    this.resourceType = resourceType;
    return this;
  }

   /**
   * Get resourceType
   * @return resourceType
  **/
  @javax.annotation.Nullable

  public String getResourceType() {
    return resourceType;
  }


  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public DoiPropertiesMetadataTypes schemaOrg(String schemaOrg) {
    
    this.schemaOrg = schemaOrg;
    return this;
  }

   /**
   * Get schemaOrg
   * @return schemaOrg
  **/
  @javax.annotation.Nullable

  public String getSchemaOrg() {
    return schemaOrg;
  }


  public void setSchemaOrg(String schemaOrg) {
    this.schemaOrg = schemaOrg;
  }


  public DoiPropertiesMetadataTypes bibtex(String bibtex) {
    
    this.bibtex = bibtex;
    return this;
  }

   /**
   * Get bibtex
   * @return bibtex
  **/
  @javax.annotation.Nullable

  public String getBibtex() {
    return bibtex;
  }


  public void setBibtex(String bibtex) {
    this.bibtex = bibtex;
  }


  public DoiPropertiesMetadataTypes citeproc(String citeproc) {
    
    this.citeproc = citeproc;
    return this;
  }

   /**
   * Get citeproc
   * @return citeproc
  **/
  @javax.annotation.Nullable

  public String getCiteproc() {
    return citeproc;
  }


  public void setCiteproc(String citeproc) {
    this.citeproc = citeproc;
  }


  public DoiPropertiesMetadataTypes ris(String ris) {
    
    this.ris = ris;
    return this;
  }

   /**
   * Get ris
   * @return ris
  **/
  @javax.annotation.Nullable

  public String getRis() {
    return ris;
  }


  public void setRis(String ris) {
    this.ris = ris;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiPropertiesMetadataTypes doiPropertiesMetadataTypes = (DoiPropertiesMetadataTypes) o;
    return Objects.equals(this.resourceTypeGeneral, doiPropertiesMetadataTypes.resourceTypeGeneral) &&
        Objects.equals(this.resourceType, doiPropertiesMetadataTypes.resourceType) &&
        Objects.equals(this.schemaOrg, doiPropertiesMetadataTypes.schemaOrg) &&
        Objects.equals(this.bibtex, doiPropertiesMetadataTypes.bibtex) &&
        Objects.equals(this.citeproc, doiPropertiesMetadataTypes.citeproc) &&
        Objects.equals(this.ris, doiPropertiesMetadataTypes.ris);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceTypeGeneral, resourceType, schemaOrg, bibtex, citeproc, ris);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiPropertiesMetadataTypes {\n");
    sb.append("    resourceTypeGeneral: ").append(toIndentedString(resourceTypeGeneral)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    schemaOrg: ").append(toIndentedString(schemaOrg)).append("\n");
    sb.append("    bibtex: ").append(toIndentedString(bibtex)).append("\n");
    sb.append("    citeproc: ").append(toIndentedString(citeproc)).append("\n");
    sb.append("    ris: ").append(toIndentedString(ris)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourceTypeGeneral");
    openapiFields.add("resourceType");
    openapiFields.add("schemaOrg");
    openapiFields.add("bibtex");
    openapiFields.add("citeproc");
    openapiFields.add("ris");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resourceTypeGeneral");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiPropertiesMetadataTypes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiPropertiesMetadataTypes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiPropertiesMetadataTypes is not found in the empty JSON string", DoiPropertiesMetadataTypes.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiPropertiesMetadataTypes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiPropertiesMetadataTypes` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DoiPropertiesMetadataTypes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("schemaOrg") != null && !jsonObj.get("schemaOrg").isJsonNull()) && !jsonObj.get("schemaOrg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaOrg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaOrg").toString()));
      }
      if ((jsonObj.get("bibtex") != null && !jsonObj.get("bibtex").isJsonNull()) && !jsonObj.get("bibtex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bibtex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bibtex").toString()));
      }
      if ((jsonObj.get("citeproc") != null && !jsonObj.get("citeproc").isJsonNull()) && !jsonObj.get("citeproc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citeproc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citeproc").toString()));
      }
      if ((jsonObj.get("ris") != null && !jsonObj.get("ris").isJsonNull()) && !jsonObj.get("ris").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ris` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiPropertiesMetadataTypes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiPropertiesMetadataTypes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiPropertiesMetadataTypes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiPropertiesMetadataTypes.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiPropertiesMetadataTypes>() {
           @Override
           public void write(JsonWriter out, DoiPropertiesMetadataTypes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiPropertiesMetadataTypes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiPropertiesMetadataTypes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiPropertiesMetadataTypes
  * @throws IOException if the JSON string is invalid with respect to DoiPropertiesMetadataTypes
  */
  public static DoiPropertiesMetadataTypes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiPropertiesMetadataTypes.class);
  }

 /**
  * Convert an instance of DoiPropertiesMetadataTypes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

