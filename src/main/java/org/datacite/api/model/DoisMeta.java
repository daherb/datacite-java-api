/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.datacite.api.model.DoiMetaObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoisMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoisMeta {
  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "totalPages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private BigDecimal totalPages;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private BigDecimal page;

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<DoiMetaObject> states = null;

  public static final String SERIALIZED_NAME_RESOURCE_TYPES = "resourceTypes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPES)
  private List<DoiMetaObject> resourceTypes = null;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private List<DoiMetaObject> created = null;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private List<DoiMetaObject> published = null;

  public static final String SERIALIZED_NAME_REGISTERED = "registered";
  @SerializedName(SERIALIZED_NAME_REGISTERED)
  private List<DoiMetaObject> registered = null;

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private List<DoiMetaObject> providers = null;

  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  private List<DoiMetaObject> clients = null;

  public static final String SERIALIZED_NAME_AFFILIATIONS = "affiliations";
  @SerializedName(SERIALIZED_NAME_AFFILIATIONS)
  private List<DoiMetaObject> affiliations = null;

  public static final String SERIALIZED_NAME_PREFIXES = "prefixes";
  @SerializedName(SERIALIZED_NAME_PREFIXES)
  private List<DoiMetaObject> prefixes = null;

  public static final String SERIALIZED_NAME_CERTIFICATES = "certificates";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES)
  private List<DoiMetaObject> certificates = null;

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private List<DoiMetaObject> licenses = null;

  public static final String SERIALIZED_NAME_SCHEMA_VERSIONS = "schemaVersions";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSIONS)
  private List<DoiMetaObject> schemaVersions = null;

  public static final String SERIALIZED_NAME_LINK_CHECKS_STATUS = "linkChecksStatus";
  @SerializedName(SERIALIZED_NAME_LINK_CHECKS_STATUS)
  private List<DoiMetaObject> linkChecksStatus = null;

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<DoiMetaObject> subjects = null;

  public static final String SERIALIZED_NAME_FIELDS_OF_SCIENCE = "fieldsOfScience";
  @SerializedName(SERIALIZED_NAME_FIELDS_OF_SCIENCE)
  private List<DoiMetaObject> fieldsOfScience = null;

  public static final String SERIALIZED_NAME_CITATIONS = "citations";
  @SerializedName(SERIALIZED_NAME_CITATIONS)
  private List<DoiMetaObject> citations = null;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<DoiMetaObject> views = null;

  public static final String SERIALIZED_NAME_DOWNLOADS = "downloads";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS)
  private List<DoiMetaObject> downloads = null;

  public DoisMeta() {
  }

  public DoisMeta total(BigDecimal total) {
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable

  public BigDecimal getTotal() {
    return total;
  }


  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public DoisMeta totalPages(BigDecimal totalPages) {
    
    this.totalPages = totalPages;
    return this;
  }

   /**
   * Get totalPages
   * @return totalPages
  **/
  @javax.annotation.Nullable

  public BigDecimal getTotalPages() {
    return totalPages;
  }


  public void setTotalPages(BigDecimal totalPages) {
    this.totalPages = totalPages;
  }


  public DoisMeta page(BigDecimal page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable

  public BigDecimal getPage() {
    return page;
  }


  public void setPage(BigDecimal page) {
    this.page = page;
  }


  public DoisMeta states(List<DoiMetaObject> states) {
    
    this.states = states;
    return this;
  }

  public DoisMeta addStatesItem(DoiMetaObject statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * Get states
   * @return states
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getStates() {
    return states;
  }


  public void setStates(List<DoiMetaObject> states) {
    this.states = states;
  }


  public DoisMeta resourceTypes(List<DoiMetaObject> resourceTypes) {
    
    this.resourceTypes = resourceTypes;
    return this;
  }

  public DoisMeta addResourceTypesItem(DoiMetaObject resourceTypesItem) {
    if (this.resourceTypes == null) {
      this.resourceTypes = new ArrayList<>();
    }
    this.resourceTypes.add(resourceTypesItem);
    return this;
  }

   /**
   * Get resourceTypes
   * @return resourceTypes
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getResourceTypes() {
    return resourceTypes;
  }


  public void setResourceTypes(List<DoiMetaObject> resourceTypes) {
    this.resourceTypes = resourceTypes;
  }


  public DoisMeta created(List<DoiMetaObject> created) {
    
    this.created = created;
    return this;
  }

  public DoisMeta addCreatedItem(DoiMetaObject createdItem) {
    if (this.created == null) {
      this.created = new ArrayList<>();
    }
    this.created.add(createdItem);
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getCreated() {
    return created;
  }


  public void setCreated(List<DoiMetaObject> created) {
    this.created = created;
  }


  public DoisMeta published(List<DoiMetaObject> published) {
    
    this.published = published;
    return this;
  }

  public DoisMeta addPublishedItem(DoiMetaObject publishedItem) {
    if (this.published == null) {
      this.published = new ArrayList<>();
    }
    this.published.add(publishedItem);
    return this;
  }

   /**
   * Get published
   * @return published
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getPublished() {
    return published;
  }


  public void setPublished(List<DoiMetaObject> published) {
    this.published = published;
  }


  public DoisMeta registered(List<DoiMetaObject> registered) {
    
    this.registered = registered;
    return this;
  }

  public DoisMeta addRegisteredItem(DoiMetaObject registeredItem) {
    if (this.registered == null) {
      this.registered = new ArrayList<>();
    }
    this.registered.add(registeredItem);
    return this;
  }

   /**
   * Get registered
   * @return registered
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getRegistered() {
    return registered;
  }


  public void setRegistered(List<DoiMetaObject> registered) {
    this.registered = registered;
  }


  public DoisMeta providers(List<DoiMetaObject> providers) {
    
    this.providers = providers;
    return this;
  }

  public DoisMeta addProvidersItem(DoiMetaObject providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<>();
    }
    this.providers.add(providersItem);
    return this;
  }

   /**
   * Get providers
   * @return providers
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getProviders() {
    return providers;
  }


  public void setProviders(List<DoiMetaObject> providers) {
    this.providers = providers;
  }


  public DoisMeta clients(List<DoiMetaObject> clients) {
    
    this.clients = clients;
    return this;
  }

  public DoisMeta addClientsItem(DoiMetaObject clientsItem) {
    if (this.clients == null) {
      this.clients = new ArrayList<>();
    }
    this.clients.add(clientsItem);
    return this;
  }

   /**
   * Get clients
   * @return clients
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getClients() {
    return clients;
  }


  public void setClients(List<DoiMetaObject> clients) {
    this.clients = clients;
  }


  public DoisMeta affiliations(List<DoiMetaObject> affiliations) {
    
    this.affiliations = affiliations;
    return this;
  }

  public DoisMeta addAffiliationsItem(DoiMetaObject affiliationsItem) {
    if (this.affiliations == null) {
      this.affiliations = new ArrayList<>();
    }
    this.affiliations.add(affiliationsItem);
    return this;
  }

   /**
   * Get affiliations
   * @return affiliations
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getAffiliations() {
    return affiliations;
  }


  public void setAffiliations(List<DoiMetaObject> affiliations) {
    this.affiliations = affiliations;
  }


  public DoisMeta prefixes(List<DoiMetaObject> prefixes) {
    
    this.prefixes = prefixes;
    return this;
  }

  public DoisMeta addPrefixesItem(DoiMetaObject prefixesItem) {
    if (this.prefixes == null) {
      this.prefixes = new ArrayList<>();
    }
    this.prefixes.add(prefixesItem);
    return this;
  }

   /**
   * Get prefixes
   * @return prefixes
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getPrefixes() {
    return prefixes;
  }


  public void setPrefixes(List<DoiMetaObject> prefixes) {
    this.prefixes = prefixes;
  }


  public DoisMeta certificates(List<DoiMetaObject> certificates) {
    
    this.certificates = certificates;
    return this;
  }

  public DoisMeta addCertificatesItem(DoiMetaObject certificatesItem) {
    if (this.certificates == null) {
      this.certificates = new ArrayList<>();
    }
    this.certificates.add(certificatesItem);
    return this;
  }

   /**
   * Get certificates
   * @return certificates
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getCertificates() {
    return certificates;
  }


  public void setCertificates(List<DoiMetaObject> certificates) {
    this.certificates = certificates;
  }


  public DoisMeta licenses(List<DoiMetaObject> licenses) {
    
    this.licenses = licenses;
    return this;
  }

  public DoisMeta addLicensesItem(DoiMetaObject licensesItem) {
    if (this.licenses == null) {
      this.licenses = new ArrayList<>();
    }
    this.licenses.add(licensesItem);
    return this;
  }

   /**
   * Get licenses
   * @return licenses
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getLicenses() {
    return licenses;
  }


  public void setLicenses(List<DoiMetaObject> licenses) {
    this.licenses = licenses;
  }


  public DoisMeta schemaVersions(List<DoiMetaObject> schemaVersions) {
    
    this.schemaVersions = schemaVersions;
    return this;
  }

  public DoisMeta addSchemaVersionsItem(DoiMetaObject schemaVersionsItem) {
    if (this.schemaVersions == null) {
      this.schemaVersions = new ArrayList<>();
    }
    this.schemaVersions.add(schemaVersionsItem);
    return this;
  }

   /**
   * Get schemaVersions
   * @return schemaVersions
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getSchemaVersions() {
    return schemaVersions;
  }


  public void setSchemaVersions(List<DoiMetaObject> schemaVersions) {
    this.schemaVersions = schemaVersions;
  }


  public DoisMeta linkChecksStatus(List<DoiMetaObject> linkChecksStatus) {
    
    this.linkChecksStatus = linkChecksStatus;
    return this;
  }

  public DoisMeta addLinkChecksStatusItem(DoiMetaObject linkChecksStatusItem) {
    if (this.linkChecksStatus == null) {
      this.linkChecksStatus = new ArrayList<>();
    }
    this.linkChecksStatus.add(linkChecksStatusItem);
    return this;
  }

   /**
   * Get linkChecksStatus
   * @return linkChecksStatus
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getLinkChecksStatus() {
    return linkChecksStatus;
  }


  public void setLinkChecksStatus(List<DoiMetaObject> linkChecksStatus) {
    this.linkChecksStatus = linkChecksStatus;
  }


  public DoisMeta subjects(List<DoiMetaObject> subjects) {
    
    this.subjects = subjects;
    return this;
  }

  public DoisMeta addSubjectsItem(DoiMetaObject subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

   /**
   * Get subjects
   * @return subjects
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getSubjects() {
    return subjects;
  }


  public void setSubjects(List<DoiMetaObject> subjects) {
    this.subjects = subjects;
  }


  public DoisMeta fieldsOfScience(List<DoiMetaObject> fieldsOfScience) {
    
    this.fieldsOfScience = fieldsOfScience;
    return this;
  }

  public DoisMeta addFieldsOfScienceItem(DoiMetaObject fieldsOfScienceItem) {
    if (this.fieldsOfScience == null) {
      this.fieldsOfScience = new ArrayList<>();
    }
    this.fieldsOfScience.add(fieldsOfScienceItem);
    return this;
  }

   /**
   * Get fieldsOfScience
   * @return fieldsOfScience
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getFieldsOfScience() {
    return fieldsOfScience;
  }


  public void setFieldsOfScience(List<DoiMetaObject> fieldsOfScience) {
    this.fieldsOfScience = fieldsOfScience;
  }


  public DoisMeta citations(List<DoiMetaObject> citations) {
    
    this.citations = citations;
    return this;
  }

  public DoisMeta addCitationsItem(DoiMetaObject citationsItem) {
    if (this.citations == null) {
      this.citations = new ArrayList<>();
    }
    this.citations.add(citationsItem);
    return this;
  }

   /**
   * Get citations
   * @return citations
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getCitations() {
    return citations;
  }


  public void setCitations(List<DoiMetaObject> citations) {
    this.citations = citations;
  }


  public DoisMeta views(List<DoiMetaObject> views) {
    
    this.views = views;
    return this;
  }

  public DoisMeta addViewsItem(DoiMetaObject viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

   /**
   * Get views
   * @return views
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getViews() {
    return views;
  }


  public void setViews(List<DoiMetaObject> views) {
    this.views = views;
  }


  public DoisMeta downloads(List<DoiMetaObject> downloads) {
    
    this.downloads = downloads;
    return this;
  }

  public DoisMeta addDownloadsItem(DoiMetaObject downloadsItem) {
    if (this.downloads == null) {
      this.downloads = new ArrayList<>();
    }
    this.downloads.add(downloadsItem);
    return this;
  }

   /**
   * Get downloads
   * @return downloads
  **/
  @javax.annotation.Nullable

  public List<DoiMetaObject> getDownloads() {
    return downloads;
  }


  public void setDownloads(List<DoiMetaObject> downloads) {
    this.downloads = downloads;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoisMeta doisMeta = (DoisMeta) o;
    return Objects.equals(this.total, doisMeta.total) &&
        Objects.equals(this.totalPages, doisMeta.totalPages) &&
        Objects.equals(this.page, doisMeta.page) &&
        Objects.equals(this.states, doisMeta.states) &&
        Objects.equals(this.resourceTypes, doisMeta.resourceTypes) &&
        Objects.equals(this.created, doisMeta.created) &&
        Objects.equals(this.published, doisMeta.published) &&
        Objects.equals(this.registered, doisMeta.registered) &&
        Objects.equals(this.providers, doisMeta.providers) &&
        Objects.equals(this.clients, doisMeta.clients) &&
        Objects.equals(this.affiliations, doisMeta.affiliations) &&
        Objects.equals(this.prefixes, doisMeta.prefixes) &&
        Objects.equals(this.certificates, doisMeta.certificates) &&
        Objects.equals(this.licenses, doisMeta.licenses) &&
        Objects.equals(this.schemaVersions, doisMeta.schemaVersions) &&
        Objects.equals(this.linkChecksStatus, doisMeta.linkChecksStatus) &&
        Objects.equals(this.subjects, doisMeta.subjects) &&
        Objects.equals(this.fieldsOfScience, doisMeta.fieldsOfScience) &&
        Objects.equals(this.citations, doisMeta.citations) &&
        Objects.equals(this.views, doisMeta.views) &&
        Objects.equals(this.downloads, doisMeta.downloads);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, totalPages, page, states, resourceTypes, created, published, registered, providers, clients, affiliations, prefixes, certificates, licenses, schemaVersions, linkChecksStatus, subjects, fieldsOfScience, citations, views, downloads);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoisMeta {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    affiliations: ").append(toIndentedString(affiliations)).append("\n");
    sb.append("    prefixes: ").append(toIndentedString(prefixes)).append("\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    schemaVersions: ").append(toIndentedString(schemaVersions)).append("\n");
    sb.append("    linkChecksStatus: ").append(toIndentedString(linkChecksStatus)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    fieldsOfScience: ").append(toIndentedString(fieldsOfScience)).append("\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    downloads: ").append(toIndentedString(downloads)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total");
    openapiFields.add("totalPages");
    openapiFields.add("page");
    openapiFields.add("states");
    openapiFields.add("resourceTypes");
    openapiFields.add("created");
    openapiFields.add("published");
    openapiFields.add("registered");
    openapiFields.add("providers");
    openapiFields.add("clients");
    openapiFields.add("affiliations");
    openapiFields.add("prefixes");
    openapiFields.add("certificates");
    openapiFields.add("licenses");
    openapiFields.add("schemaVersions");
    openapiFields.add("linkChecksStatus");
    openapiFields.add("subjects");
    openapiFields.add("fieldsOfScience");
    openapiFields.add("citations");
    openapiFields.add("views");
    openapiFields.add("downloads");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoisMeta
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoisMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoisMeta is not found in the empty JSON string", DoisMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoisMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoisMeta` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("states") != null && !jsonObj.get("states").isJsonNull()) {
        JsonArray jsonArraystates = jsonObj.getAsJsonArray("states");
        if (jsonArraystates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("states").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
          }

          // validate the optional field `states` (array)
          for (int i = 0; i < jsonArraystates.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArraystates.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("resourceTypes") != null && !jsonObj.get("resourceTypes").isJsonNull()) {
        JsonArray jsonArrayresourceTypes = jsonObj.getAsJsonArray("resourceTypes");
        if (jsonArrayresourceTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("resourceTypes").toString()));
          }

          // validate the optional field `resourceTypes` (array)
          for (int i = 0; i < jsonArrayresourceTypes.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArrayresourceTypes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) {
        JsonArray jsonArraycreated = jsonObj.getAsJsonArray("created");
        if (jsonArraycreated != null) {
          // ensure the json data is an array
          if (!jsonObj.get("created").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `created` to be an array in the JSON string but got `%s`", jsonObj.get("created").toString()));
          }

          // validate the optional field `created` (array)
          for (int i = 0; i < jsonArraycreated.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArraycreated.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("published") != null && !jsonObj.get("published").isJsonNull()) {
        JsonArray jsonArraypublished = jsonObj.getAsJsonArray("published");
        if (jsonArraypublished != null) {
          // ensure the json data is an array
          if (!jsonObj.get("published").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `published` to be an array in the JSON string but got `%s`", jsonObj.get("published").toString()));
          }

          // validate the optional field `published` (array)
          for (int i = 0; i < jsonArraypublished.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArraypublished.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("registered") != null && !jsonObj.get("registered").isJsonNull()) {
        JsonArray jsonArrayregistered = jsonObj.getAsJsonArray("registered");
        if (jsonArrayregistered != null) {
          // ensure the json data is an array
          if (!jsonObj.get("registered").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `registered` to be an array in the JSON string but got `%s`", jsonObj.get("registered").toString()));
          }

          // validate the optional field `registered` (array)
          for (int i = 0; i < jsonArrayregistered.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArrayregistered.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("providers") != null && !jsonObj.get("providers").isJsonNull()) {
        JsonArray jsonArrayproviders = jsonObj.getAsJsonArray("providers");
        if (jsonArrayproviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("providers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `providers` to be an array in the JSON string but got `%s`", jsonObj.get("providers").toString()));
          }

          // validate the optional field `providers` (array)
          for (int i = 0; i < jsonArrayproviders.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArrayproviders.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("clients") != null && !jsonObj.get("clients").isJsonNull()) {
        JsonArray jsonArrayclients = jsonObj.getAsJsonArray("clients");
        if (jsonArrayclients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clients` to be an array in the JSON string but got `%s`", jsonObj.get("clients").toString()));
          }

          // validate the optional field `clients` (array)
          for (int i = 0; i < jsonArrayclients.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArrayclients.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("affiliations") != null && !jsonObj.get("affiliations").isJsonNull()) {
        JsonArray jsonArrayaffiliations = jsonObj.getAsJsonArray("affiliations");
        if (jsonArrayaffiliations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("affiliations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `affiliations` to be an array in the JSON string but got `%s`", jsonObj.get("affiliations").toString()));
          }

          // validate the optional field `affiliations` (array)
          for (int i = 0; i < jsonArrayaffiliations.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArrayaffiliations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("prefixes") != null && !jsonObj.get("prefixes").isJsonNull()) {
        JsonArray jsonArrayprefixes = jsonObj.getAsJsonArray("prefixes");
        if (jsonArrayprefixes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prefixes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prefixes` to be an array in the JSON string but got `%s`", jsonObj.get("prefixes").toString()));
          }

          // validate the optional field `prefixes` (array)
          for (int i = 0; i < jsonArrayprefixes.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArrayprefixes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("certificates") != null && !jsonObj.get("certificates").isJsonNull()) {
        JsonArray jsonArraycertificates = jsonObj.getAsJsonArray("certificates");
        if (jsonArraycertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("certificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `certificates` to be an array in the JSON string but got `%s`", jsonObj.get("certificates").toString()));
          }

          // validate the optional field `certificates` (array)
          for (int i = 0; i < jsonArraycertificates.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArraycertificates.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("licenses") != null && !jsonObj.get("licenses").isJsonNull()) {
        JsonArray jsonArraylicenses = jsonObj.getAsJsonArray("licenses");
        if (jsonArraylicenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("licenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `licenses` to be an array in the JSON string but got `%s`", jsonObj.get("licenses").toString()));
          }

          // validate the optional field `licenses` (array)
          for (int i = 0; i < jsonArraylicenses.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArraylicenses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("schemaVersions") != null && !jsonObj.get("schemaVersions").isJsonNull()) {
        JsonArray jsonArrayschemaVersions = jsonObj.getAsJsonArray("schemaVersions");
        if (jsonArrayschemaVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schemaVersions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schemaVersions` to be an array in the JSON string but got `%s`", jsonObj.get("schemaVersions").toString()));
          }

          // validate the optional field `schemaVersions` (array)
          for (int i = 0; i < jsonArrayschemaVersions.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArrayschemaVersions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("linkChecksStatus") != null && !jsonObj.get("linkChecksStatus").isJsonNull()) {
        JsonArray jsonArraylinkChecksStatus = jsonObj.getAsJsonArray("linkChecksStatus");
        if (jsonArraylinkChecksStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkChecksStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkChecksStatus` to be an array in the JSON string but got `%s`", jsonObj.get("linkChecksStatus").toString()));
          }

          // validate the optional field `linkChecksStatus` (array)
          for (int i = 0; i < jsonArraylinkChecksStatus.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArraylinkChecksStatus.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull()) {
        JsonArray jsonArraysubjects = jsonObj.getAsJsonArray("subjects");
        if (jsonArraysubjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
          }

          // validate the optional field `subjects` (array)
          for (int i = 0; i < jsonArraysubjects.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArraysubjects.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("fieldsOfScience") != null && !jsonObj.get("fieldsOfScience").isJsonNull()) {
        JsonArray jsonArrayfieldsOfScience = jsonObj.getAsJsonArray("fieldsOfScience");
        if (jsonArrayfieldsOfScience != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fieldsOfScience").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fieldsOfScience` to be an array in the JSON string but got `%s`", jsonObj.get("fieldsOfScience").toString()));
          }

          // validate the optional field `fieldsOfScience` (array)
          for (int i = 0; i < jsonArrayfieldsOfScience.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArrayfieldsOfScience.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("citations") != null && !jsonObj.get("citations").isJsonNull()) {
        JsonArray jsonArraycitations = jsonObj.getAsJsonArray("citations");
        if (jsonArraycitations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("citations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `citations` to be an array in the JSON string but got `%s`", jsonObj.get("citations").toString()));
          }

          // validate the optional field `citations` (array)
          for (int i = 0; i < jsonArraycitations.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArraycitations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull()) {
        JsonArray jsonArrayviews = jsonObj.getAsJsonArray("views");
        if (jsonArrayviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("views").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
          }

          // validate the optional field `views` (array)
          for (int i = 0; i < jsonArrayviews.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArrayviews.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("downloads") != null && !jsonObj.get("downloads").isJsonNull()) {
        JsonArray jsonArraydownloads = jsonObj.getAsJsonArray("downloads");
        if (jsonArraydownloads != null) {
          // ensure the json data is an array
          if (!jsonObj.get("downloads").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `downloads` to be an array in the JSON string but got `%s`", jsonObj.get("downloads").toString()));
          }

          // validate the optional field `downloads` (array)
          for (int i = 0; i < jsonArraydownloads.size(); i++) {
            DoiMetaObject.validateJsonObject(jsonArraydownloads.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoisMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoisMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoisMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoisMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<DoisMeta>() {
           @Override
           public void write(JsonWriter out, DoisMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoisMeta read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoisMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoisMeta
  * @throws IOException if the JSON string is invalid with respect to DoisMeta
  */
  public static DoisMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoisMeta.class);
  }

 /**
  * Convert an instance of DoisMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

