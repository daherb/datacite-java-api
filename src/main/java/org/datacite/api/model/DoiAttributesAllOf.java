/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.datacite.api.model.DoiAttributesAllOfAlternateIdentifiers;
import org.datacite.api.model.DoiAttributesAllOfIdentifiers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiAttributesAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiAttributesAllOf {
  public static final String SERIALIZED_NAME_DOI = "doi";
  @SerializedName(SERIALIZED_NAME_DOI)
  private String doi;

  /**
   * Can be set to trigger a DOI state change.
   */
  @JsonAdapter(EventEnum.Adapter.class)
  public enum EventEnum {
    PUBLISH("publish"),
    
    REGISTER("register"),
    
    HIDE("hide");

    private String value;

    EventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventEnum fromValue(String value) {
      for (EventEnum b : EventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private EventEnum event;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<DoiAttributesAllOfIdentifiers> identifiers = null;

  public static final String SERIALIZED_NAME_ALTERNATE_IDENTIFIERS = "alternateIdentifiers";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_IDENTIFIERS)
  private List<DoiAttributesAllOfAlternateIdentifiers> alternateIdentifiers = null;

  public DoiAttributesAllOf() {
  }

  public DoiAttributesAllOf doi(String doi) {
    
    this.doi = doi;
    return this;
  }

   /**
   * Get doi
   * @return doi
  **/
  @javax.annotation.Nullable

  public String getDoi() {
    return doi;
  }


  public void setDoi(String doi) {
    this.doi = doi;
  }


  public DoiAttributesAllOf event(EventEnum event) {
    
    this.event = event;
    return this;
  }

   /**
   * Can be set to trigger a DOI state change.
   * @return event
  **/
  @javax.annotation.Nullable

  public EventEnum getEvent() {
    return event;
  }


  public void setEvent(EventEnum event) {
    this.event = event;
  }


  public DoiAttributesAllOf prefix(String prefix) {
    
    this.prefix = prefix;
    return this;
  }

   /**
   * Get prefix
   * @return prefix
  **/
  @javax.annotation.Nullable

  public String getPrefix() {
    return prefix;
  }


  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public DoiAttributesAllOf suffix(String suffix) {
    
    this.suffix = suffix;
    return this;
  }

   /**
   * Get suffix
   * @return suffix
  **/
  @javax.annotation.Nullable

  public String getSuffix() {
    return suffix;
  }


  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }


  public DoiAttributesAllOf identifiers(List<DoiAttributesAllOfIdentifiers> identifiers) {
    
    this.identifiers = identifiers;
    return this;
  }

  public DoiAttributesAllOf addIdentifiersItem(DoiAttributesAllOfIdentifiers identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

   /**
   * Get identifiers
   * @return identifiers
  **/
  @javax.annotation.Nullable

  public List<DoiAttributesAllOfIdentifiers> getIdentifiers() {
    return identifiers;
  }


  public void setIdentifiers(List<DoiAttributesAllOfIdentifiers> identifiers) {
    this.identifiers = identifiers;
  }


  public DoiAttributesAllOf alternateIdentifiers(List<DoiAttributesAllOfAlternateIdentifiers> alternateIdentifiers) {
    
    this.alternateIdentifiers = alternateIdentifiers;
    return this;
  }

  public DoiAttributesAllOf addAlternateIdentifiersItem(DoiAttributesAllOfAlternateIdentifiers alternateIdentifiersItem) {
    if (this.alternateIdentifiers == null) {
      this.alternateIdentifiers = new ArrayList<>();
    }
    this.alternateIdentifiers.add(alternateIdentifiersItem);
    return this;
  }

   /**
   * Get alternateIdentifiers
   * @return alternateIdentifiers
  **/
  @javax.annotation.Nullable

  public List<DoiAttributesAllOfAlternateIdentifiers> getAlternateIdentifiers() {
    return alternateIdentifiers;
  }


  public void setAlternateIdentifiers(List<DoiAttributesAllOfAlternateIdentifiers> alternateIdentifiers) {
    this.alternateIdentifiers = alternateIdentifiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiAttributesAllOf doiAttributesAllOf = (DoiAttributesAllOf) o;
    return Objects.equals(this.doi, doiAttributesAllOf.doi) &&
        Objects.equals(this.event, doiAttributesAllOf.event) &&
        Objects.equals(this.prefix, doiAttributesAllOf.prefix) &&
        Objects.equals(this.suffix, doiAttributesAllOf.suffix) &&
        Objects.equals(this.identifiers, doiAttributesAllOf.identifiers) &&
        Objects.equals(this.alternateIdentifiers, doiAttributesAllOf.alternateIdentifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(doi, event, prefix, suffix, identifiers, alternateIdentifiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiAttributesAllOf {\n");
    sb.append("    doi: ").append(toIndentedString(doi)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    alternateIdentifiers: ").append(toIndentedString(alternateIdentifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("doi");
    openapiFields.add("event");
    openapiFields.add("prefix");
    openapiFields.add("suffix");
    openapiFields.add("identifiers");
    openapiFields.add("alternateIdentifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiAttributesAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiAttributesAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiAttributesAllOf is not found in the empty JSON string", DoiAttributesAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiAttributesAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiAttributesAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("doi") != null && !jsonObj.get("doi").isJsonNull()) && !jsonObj.get("doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doi").toString()));
      }
      if ((jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) && !jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      if ((jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) && !jsonObj.get("suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffix").toString()));
      }
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
        if (jsonArrayidentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
          }

          // validate the optional field `identifiers` (array)
          for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
            DoiAttributesAllOfIdentifiers.validateJsonObject(jsonArrayidentifiers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("alternateIdentifiers") != null && !jsonObj.get("alternateIdentifiers").isJsonNull()) {
        JsonArray jsonArrayalternateIdentifiers = jsonObj.getAsJsonArray("alternateIdentifiers");
        if (jsonArrayalternateIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alternateIdentifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alternateIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("alternateIdentifiers").toString()));
          }

          // validate the optional field `alternateIdentifiers` (array)
          for (int i = 0; i < jsonArrayalternateIdentifiers.size(); i++) {
            DoiAttributesAllOfAlternateIdentifiers.validateJsonObject(jsonArrayalternateIdentifiers.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiAttributesAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiAttributesAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiAttributesAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiAttributesAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiAttributesAllOf>() {
           @Override
           public void write(JsonWriter out, DoiAttributesAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiAttributesAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiAttributesAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiAttributesAllOf
  * @throws IOException if the JSON string is invalid with respect to DoiAttributesAllOf
  */
  public static DoiAttributesAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiAttributesAllOf.class);
  }

 /**
  * Convert an instance of DoiAttributesAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

