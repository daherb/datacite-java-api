/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiPropertiesMetadataDatesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiPropertiesMetadataDatesInner {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  /**
   * Gets or Sets dateType
   */
  @JsonAdapter(DateTypeEnum.Adapter.class)
  public enum DateTypeEnum {
    ACCEPTED("Accepted"),
    
    AVAILABLE("Available"),
    
    COPYRIGHTED("Copyrighted"),
    
    COLLECTED("Collected"),
    
    CREATED("Created"),
    
    ISSUED("Issued"),
    
    SUBMITTED("Submitted"),
    
    UPDATED("Updated"),
    
    VALID("Valid"),
    
    WITHDRAWN("Withdrawn"),
    
    OTHER("Other");

    private String value;

    DateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateTypeEnum fromValue(String value) {
      for (DateTypeEnum b : DateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DateTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATE_TYPE = "dateType";
  @SerializedName(SERIALIZED_NAME_DATE_TYPE)
  private DateTypeEnum dateType;

  public static final String SERIALIZED_NAME_DATE_INFORMATION = "dateInformation";
  @SerializedName(SERIALIZED_NAME_DATE_INFORMATION)
  private String dateInformation;

  public DoiPropertiesMetadataDatesInner() {
  }

  public DoiPropertiesMetadataDatesInner date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    this.date = date;
  }


  public DoiPropertiesMetadataDatesInner dateType(DateTypeEnum dateType) {
    
    this.dateType = dateType;
    return this;
  }

   /**
   * Get dateType
   * @return dateType
  **/
  @javax.annotation.Nullable

  public DateTypeEnum getDateType() {
    return dateType;
  }


  public void setDateType(DateTypeEnum dateType) {
    this.dateType = dateType;
  }


  public DoiPropertiesMetadataDatesInner dateInformation(String dateInformation) {
    
    this.dateInformation = dateInformation;
    return this;
  }

   /**
   * Get dateInformation
   * @return dateInformation
  **/
  @javax.annotation.Nullable

  public String getDateInformation() {
    return dateInformation;
  }


  public void setDateInformation(String dateInformation) {
    this.dateInformation = dateInformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiPropertiesMetadataDatesInner doiPropertiesMetadataDatesInner = (DoiPropertiesMetadataDatesInner) o;
    return Objects.equals(this.date, doiPropertiesMetadataDatesInner.date) &&
        Objects.equals(this.dateType, doiPropertiesMetadataDatesInner.dateType) &&
        Objects.equals(this.dateInformation, doiPropertiesMetadataDatesInner.dateInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, dateType, dateInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiPropertiesMetadataDatesInner {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateType: ").append(toIndentedString(dateType)).append("\n");
    sb.append("    dateInformation: ").append(toIndentedString(dateInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("dateType");
    openapiFields.add("dateInformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiPropertiesMetadataDatesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiPropertiesMetadataDatesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiPropertiesMetadataDatesInner is not found in the empty JSON string", DoiPropertiesMetadataDatesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiPropertiesMetadataDatesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiPropertiesMetadataDatesInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("dateType") != null && !jsonObj.get("dateType").isJsonNull()) && !jsonObj.get("dateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateType").toString()));
      }
      if ((jsonObj.get("dateInformation") != null && !jsonObj.get("dateInformation").isJsonNull()) && !jsonObj.get("dateInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateInformation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiPropertiesMetadataDatesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiPropertiesMetadataDatesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiPropertiesMetadataDatesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiPropertiesMetadataDatesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiPropertiesMetadataDatesInner>() {
           @Override
           public void write(JsonWriter out, DoiPropertiesMetadataDatesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiPropertiesMetadataDatesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiPropertiesMetadataDatesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiPropertiesMetadataDatesInner
  * @throws IOException if the JSON string is invalid with respect to DoiPropertiesMetadataDatesInner
  */
  public static DoiPropertiesMetadataDatesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiPropertiesMetadataDatesInner.class);
  }

 /**
  * Convert an instance of DoiPropertiesMetadataDatesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

