/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.datacite.api.model.DoiDataRelationshipsClient;
import org.datacite.api.model.DoiDataRelationshipsReferences;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiDataRelationships
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiDataRelationships {
  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private DoiDataRelationshipsClient client;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private DoiDataRelationshipsClient provider;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private DoiDataRelationshipsClient media;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private DoiDataRelationshipsReferences references;

  public static final String SERIALIZED_NAME_CITATIONS = "citations";
  @SerializedName(SERIALIZED_NAME_CITATIONS)
  private DoiDataRelationshipsReferences citations;

  public static final String SERIALIZED_NAME_PARTS = "parts";
  @SerializedName(SERIALIZED_NAME_PARTS)
  private DoiDataRelationshipsReferences parts;

  public static final String SERIALIZED_NAME_PART_OF = "partOf";
  @SerializedName(SERIALIZED_NAME_PART_OF)
  private DoiDataRelationshipsReferences partOf;

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private DoiDataRelationshipsReferences versions;

  public static final String SERIALIZED_NAME_VERSION_OF = "versionOf";
  @SerializedName(SERIALIZED_NAME_VERSION_OF)
  private DoiDataRelationshipsReferences versionOf;

  public DoiDataRelationships() {
  }

  public DoiDataRelationships client(DoiDataRelationshipsClient client) {
    
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable

  public DoiDataRelationshipsClient getClient() {
    return client;
  }


  public void setClient(DoiDataRelationshipsClient client) {
    this.client = client;
  }


  public DoiDataRelationships provider(DoiDataRelationshipsClient provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * Get provider
   * @return provider
  **/
  @javax.annotation.Nullable

  public DoiDataRelationshipsClient getProvider() {
    return provider;
  }


  public void setProvider(DoiDataRelationshipsClient provider) {
    this.provider = provider;
  }


  public DoiDataRelationships media(DoiDataRelationshipsClient media) {
    
    this.media = media;
    return this;
  }

   /**
   * Get media
   * @return media
  **/
  @javax.annotation.Nullable

  public DoiDataRelationshipsClient getMedia() {
    return media;
  }


  public void setMedia(DoiDataRelationshipsClient media) {
    this.media = media;
  }


  public DoiDataRelationships references(DoiDataRelationshipsReferences references) {
    
    this.references = references;
    return this;
  }

   /**
   * Get references
   * @return references
  **/
  @javax.annotation.Nullable

  public DoiDataRelationshipsReferences getReferences() {
    return references;
  }


  public void setReferences(DoiDataRelationshipsReferences references) {
    this.references = references;
  }


  public DoiDataRelationships citations(DoiDataRelationshipsReferences citations) {
    
    this.citations = citations;
    return this;
  }

   /**
   * Get citations
   * @return citations
  **/
  @javax.annotation.Nullable

  public DoiDataRelationshipsReferences getCitations() {
    return citations;
  }


  public void setCitations(DoiDataRelationshipsReferences citations) {
    this.citations = citations;
  }


  public DoiDataRelationships parts(DoiDataRelationshipsReferences parts) {
    
    this.parts = parts;
    return this;
  }

   /**
   * Get parts
   * @return parts
  **/
  @javax.annotation.Nullable

  public DoiDataRelationshipsReferences getParts() {
    return parts;
  }


  public void setParts(DoiDataRelationshipsReferences parts) {
    this.parts = parts;
  }


  public DoiDataRelationships partOf(DoiDataRelationshipsReferences partOf) {
    
    this.partOf = partOf;
    return this;
  }

   /**
   * Get partOf
   * @return partOf
  **/
  @javax.annotation.Nullable

  public DoiDataRelationshipsReferences getPartOf() {
    return partOf;
  }


  public void setPartOf(DoiDataRelationshipsReferences partOf) {
    this.partOf = partOf;
  }


  public DoiDataRelationships versions(DoiDataRelationshipsReferences versions) {
    
    this.versions = versions;
    return this;
  }

   /**
   * Get versions
   * @return versions
  **/
  @javax.annotation.Nullable

  public DoiDataRelationshipsReferences getVersions() {
    return versions;
  }


  public void setVersions(DoiDataRelationshipsReferences versions) {
    this.versions = versions;
  }


  public DoiDataRelationships versionOf(DoiDataRelationshipsReferences versionOf) {
    
    this.versionOf = versionOf;
    return this;
  }

   /**
   * Get versionOf
   * @return versionOf
  **/
  @javax.annotation.Nullable

  public DoiDataRelationshipsReferences getVersionOf() {
    return versionOf;
  }


  public void setVersionOf(DoiDataRelationshipsReferences versionOf) {
    this.versionOf = versionOf;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiDataRelationships doiDataRelationships = (DoiDataRelationships) o;
    return Objects.equals(this.client, doiDataRelationships.client) &&
        Objects.equals(this.provider, doiDataRelationships.provider) &&
        Objects.equals(this.media, doiDataRelationships.media) &&
        Objects.equals(this.references, doiDataRelationships.references) &&
        Objects.equals(this.citations, doiDataRelationships.citations) &&
        Objects.equals(this.parts, doiDataRelationships.parts) &&
        Objects.equals(this.partOf, doiDataRelationships.partOf) &&
        Objects.equals(this.versions, doiDataRelationships.versions) &&
        Objects.equals(this.versionOf, doiDataRelationships.versionOf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(client, provider, media, references, citations, parts, partOf, versions, versionOf);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiDataRelationships {\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("    partOf: ").append(toIndentedString(partOf)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("    versionOf: ").append(toIndentedString(versionOf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client");
    openapiFields.add("provider");
    openapiFields.add("media");
    openapiFields.add("references");
    openapiFields.add("citations");
    openapiFields.add("parts");
    openapiFields.add("partOf");
    openapiFields.add("versions");
    openapiFields.add("versionOf");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiDataRelationships
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiDataRelationships.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiDataRelationships is not found in the empty JSON string", DoiDataRelationships.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiDataRelationships.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiDataRelationships` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        DoiDataRelationshipsClient.validateJsonObject(jsonObj.getAsJsonObject("client"));
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        DoiDataRelationshipsClient.validateJsonObject(jsonObj.getAsJsonObject("provider"));
      }
      // validate the optional field `media`
      if (jsonObj.get("media") != null && !jsonObj.get("media").isJsonNull()) {
        DoiDataRelationshipsClient.validateJsonObject(jsonObj.getAsJsonObject("media"));
      }
      // validate the optional field `references`
      if (jsonObj.get("references") != null && !jsonObj.get("references").isJsonNull()) {
        DoiDataRelationshipsReferences.validateJsonObject(jsonObj.getAsJsonObject("references"));
      }
      // validate the optional field `citations`
      if (jsonObj.get("citations") != null && !jsonObj.get("citations").isJsonNull()) {
        DoiDataRelationshipsReferences.validateJsonObject(jsonObj.getAsJsonObject("citations"));
      }
      // validate the optional field `parts`
      if (jsonObj.get("parts") != null && !jsonObj.get("parts").isJsonNull()) {
        DoiDataRelationshipsReferences.validateJsonObject(jsonObj.getAsJsonObject("parts"));
      }
      // validate the optional field `partOf`
      if (jsonObj.get("partOf") != null && !jsonObj.get("partOf").isJsonNull()) {
        DoiDataRelationshipsReferences.validateJsonObject(jsonObj.getAsJsonObject("partOf"));
      }
      // validate the optional field `versions`
      if (jsonObj.get("versions") != null && !jsonObj.get("versions").isJsonNull()) {
        DoiDataRelationshipsReferences.validateJsonObject(jsonObj.getAsJsonObject("versions"));
      }
      // validate the optional field `versionOf`
      if (jsonObj.get("versionOf") != null && !jsonObj.get("versionOf").isJsonNull()) {
        DoiDataRelationshipsReferences.validateJsonObject(jsonObj.getAsJsonObject("versionOf"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiDataRelationships.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiDataRelationships' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiDataRelationships> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiDataRelationships.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiDataRelationships>() {
           @Override
           public void write(JsonWriter out, DoiDataRelationships value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiDataRelationships read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiDataRelationships given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiDataRelationships
  * @throws IOException if the JSON string is invalid with respect to DoiDataRelationships
  */
  public static DoiDataRelationships fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiDataRelationships.class);
  }

 /**
  * Convert an instance of DoiDataRelationships to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

