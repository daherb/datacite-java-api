/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets contributorType
 */
@JsonAdapter(ContributorType.Adapter.class)
public enum ContributorType {
  
  CONTACTPERSON("ContactPerson"),
  
  DATACOLLECTOR("DataCollector"),
  
  DATACURATOR("DataCurator"),
  
  DATAMANAGER("DataManager"),
  
  DISTRIBUTOR("Distributor"),
  
  EDITOR("Editor"),
  
  HOSTINGINSTITUTION("HostingInstitution"),
  
  PRODUCER("Producer"),
  
  PROJECTLEADER("ProjectLeader"),
  
  PROJECTMANAGER("ProjectManager"),
  
  PROJECTMEMBER("ProjectMember"),
  
  REGISTRATIONAGENCY("RegistrationAgency"),
  
  REGISTRATIONAUTHORITY("RegistrationAuthority"),
  
  RELATEDPERSON("RelatedPerson"),
  
  RESEARCHER("Researcher"),
  
  RESEARCHGROUP("ResearchGroup"),
  
  RIGHTSHOLDER("RightsHolder"),
  
  SPONSOR("Sponsor"),
  
  SUPERVISOR("Supervisor"),
  
  WORKPACKAGELEADER("WorkPackageLeader"),
  
  OTHER("Other");

  private String value;

  ContributorType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ContributorType fromValue(String value) {
    for (ContributorType b : ContributorType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ContributorType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ContributorType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ContributorType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ContributorType.fromValue(value);
    }
  }
}

