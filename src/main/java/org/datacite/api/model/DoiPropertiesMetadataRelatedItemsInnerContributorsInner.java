/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.datacite.api.model.ContributorType;
import org.datacite.api.model.NameType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiPropertiesMetadataRelatedItemsInnerContributorsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiPropertiesMetadataRelatedItemsInnerContributorsInner {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_FAMILY_NAME = "familyName";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_NAME_TYPE = "nameType";
  @SerializedName(SERIALIZED_NAME_NAME_TYPE)
  private NameType nameType;

  public static final String SERIALIZED_NAME_CONTRIBUTOR_TYPE = "contributorType";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR_TYPE)
  private ContributorType contributorType;

  public DoiPropertiesMetadataRelatedItemsInnerContributorsInner() {
  }

  public DoiPropertiesMetadataRelatedItemsInnerContributorsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DoiPropertiesMetadataRelatedItemsInnerContributorsInner givenName(String givenName) {
    
    this.givenName = givenName;
    return this;
  }

   /**
   * Get givenName
   * @return givenName
  **/
  @javax.annotation.Nullable

  public String getGivenName() {
    return givenName;
  }


  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public DoiPropertiesMetadataRelatedItemsInnerContributorsInner familyName(String familyName) {
    
    this.familyName = familyName;
    return this;
  }

   /**
   * Get familyName
   * @return familyName
  **/
  @javax.annotation.Nullable

  public String getFamilyName() {
    return familyName;
  }


  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public DoiPropertiesMetadataRelatedItemsInnerContributorsInner nameType(NameType nameType) {
    
    this.nameType = nameType;
    return this;
  }

   /**
   * Get nameType
   * @return nameType
  **/
  @javax.annotation.Nullable

  public NameType getNameType() {
    return nameType;
  }


  public void setNameType(NameType nameType) {
    this.nameType = nameType;
  }


  public DoiPropertiesMetadataRelatedItemsInnerContributorsInner contributorType(ContributorType contributorType) {
    
    this.contributorType = contributorType;
    return this;
  }

   /**
   * Get contributorType
   * @return contributorType
  **/
  @javax.annotation.Nonnull

  public ContributorType getContributorType() {
    return contributorType;
  }


  public void setContributorType(ContributorType contributorType) {
    this.contributorType = contributorType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiPropertiesMetadataRelatedItemsInnerContributorsInner doiPropertiesMetadataRelatedItemsInnerContributorsInner = (DoiPropertiesMetadataRelatedItemsInnerContributorsInner) o;
    return Objects.equals(this.name, doiPropertiesMetadataRelatedItemsInnerContributorsInner.name) &&
        Objects.equals(this.givenName, doiPropertiesMetadataRelatedItemsInnerContributorsInner.givenName) &&
        Objects.equals(this.familyName, doiPropertiesMetadataRelatedItemsInnerContributorsInner.familyName) &&
        Objects.equals(this.nameType, doiPropertiesMetadataRelatedItemsInnerContributorsInner.nameType) &&
        Objects.equals(this.contributorType, doiPropertiesMetadataRelatedItemsInnerContributorsInner.contributorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, givenName, familyName, nameType, contributorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiPropertiesMetadataRelatedItemsInnerContributorsInner {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    nameType: ").append(toIndentedString(nameType)).append("\n");
    sb.append("    contributorType: ").append(toIndentedString(contributorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("givenName");
    openapiFields.add("familyName");
    openapiFields.add("nameType");
    openapiFields.add("contributorType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("contributorType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiPropertiesMetadataRelatedItemsInnerContributorsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiPropertiesMetadataRelatedItemsInnerContributorsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiPropertiesMetadataRelatedItemsInnerContributorsInner is not found in the empty JSON string", DoiPropertiesMetadataRelatedItemsInnerContributorsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiPropertiesMetadataRelatedItemsInnerContributorsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiPropertiesMetadataRelatedItemsInnerContributorsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DoiPropertiesMetadataRelatedItemsInnerContributorsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("givenName") != null && !jsonObj.get("givenName").isJsonNull()) && !jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if ((jsonObj.get("familyName") != null && !jsonObj.get("familyName").isJsonNull()) && !jsonObj.get("familyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `familyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("familyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiPropertiesMetadataRelatedItemsInnerContributorsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiPropertiesMetadataRelatedItemsInnerContributorsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiPropertiesMetadataRelatedItemsInnerContributorsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiPropertiesMetadataRelatedItemsInnerContributorsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiPropertiesMetadataRelatedItemsInnerContributorsInner>() {
           @Override
           public void write(JsonWriter out, DoiPropertiesMetadataRelatedItemsInnerContributorsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiPropertiesMetadataRelatedItemsInnerContributorsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiPropertiesMetadataRelatedItemsInnerContributorsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiPropertiesMetadataRelatedItemsInnerContributorsInner
  * @throws IOException if the JSON string is invalid with respect to DoiPropertiesMetadataRelatedItemsInnerContributorsInner
  */
  public static DoiPropertiesMetadataRelatedItemsInnerContributorsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiPropertiesMetadataRelatedItemsInnerContributorsInner.class);
  }

 /**
  * Convert an instance of DoiPropertiesMetadataRelatedItemsInnerContributorsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

