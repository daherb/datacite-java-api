/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiPropertiesMetadataFundingReferencesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiPropertiesMetadataFundingReferencesInner {
  public static final String SERIALIZED_NAME_FUNDER_NAME = "funderName";
  @SerializedName(SERIALIZED_NAME_FUNDER_NAME)
  private String funderName;

  public static final String SERIALIZED_NAME_FUNDER_IDENTIFIER = "funderIdentifier";
  @SerializedName(SERIALIZED_NAME_FUNDER_IDENTIFIER)
  private String funderIdentifier;

  /**
   * Gets or Sets funderIdentifierType
   */
  @JsonAdapter(FunderIdentifierTypeEnum.Adapter.class)
  public enum FunderIdentifierTypeEnum {
    CROSSREF_FUNDER_ID("Crossref Funder ID"),
    
    GRID("GRID"),
    
    ISNI("ISNI"),
    
    ROR("ROR"),
    
    OTHER("Other");

    private String value;

    FunderIdentifierTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FunderIdentifierTypeEnum fromValue(String value) {
      for (FunderIdentifierTypeEnum b : FunderIdentifierTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FunderIdentifierTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FunderIdentifierTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FunderIdentifierTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FunderIdentifierTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FUNDER_IDENTIFIER_TYPE = "funderIdentifierType";
  @SerializedName(SERIALIZED_NAME_FUNDER_IDENTIFIER_TYPE)
  private FunderIdentifierTypeEnum funderIdentifierType;

  public static final String SERIALIZED_NAME_AWARD_NUMBER = "awardNumber";
  @SerializedName(SERIALIZED_NAME_AWARD_NUMBER)
  private String awardNumber;

  public static final String SERIALIZED_NAME_AWARD_URI = "awardUri";
  @SerializedName(SERIALIZED_NAME_AWARD_URI)
  private String awardUri;

  public static final String SERIALIZED_NAME_AWARD_TITLE = "awardTitle";
  @SerializedName(SERIALIZED_NAME_AWARD_TITLE)
  private String awardTitle;

  public DoiPropertiesMetadataFundingReferencesInner() {
  }

  public DoiPropertiesMetadataFundingReferencesInner funderName(String funderName) {
    
    this.funderName = funderName;
    return this;
  }

   /**
   * Get funderName
   * @return funderName
  **/
  @javax.annotation.Nullable

  public String getFunderName() {
    return funderName;
  }


  public void setFunderName(String funderName) {
    this.funderName = funderName;
  }


  public DoiPropertiesMetadataFundingReferencesInner funderIdentifier(String funderIdentifier) {
    
    this.funderIdentifier = funderIdentifier;
    return this;
  }

   /**
   * Get funderIdentifier
   * @return funderIdentifier
  **/
  @javax.annotation.Nullable

  public String getFunderIdentifier() {
    return funderIdentifier;
  }


  public void setFunderIdentifier(String funderIdentifier) {
    this.funderIdentifier = funderIdentifier;
  }


  public DoiPropertiesMetadataFundingReferencesInner funderIdentifierType(FunderIdentifierTypeEnum funderIdentifierType) {
    
    this.funderIdentifierType = funderIdentifierType;
    return this;
  }

   /**
   * Get funderIdentifierType
   * @return funderIdentifierType
  **/
  @javax.annotation.Nullable

  public FunderIdentifierTypeEnum getFunderIdentifierType() {
    return funderIdentifierType;
  }


  public void setFunderIdentifierType(FunderIdentifierTypeEnum funderIdentifierType) {
    this.funderIdentifierType = funderIdentifierType;
  }


  public DoiPropertiesMetadataFundingReferencesInner awardNumber(String awardNumber) {
    
    this.awardNumber = awardNumber;
    return this;
  }

   /**
   * Get awardNumber
   * @return awardNumber
  **/
  @javax.annotation.Nullable

  public String getAwardNumber() {
    return awardNumber;
  }


  public void setAwardNumber(String awardNumber) {
    this.awardNumber = awardNumber;
  }


  public DoiPropertiesMetadataFundingReferencesInner awardUri(String awardUri) {
    
    this.awardUri = awardUri;
    return this;
  }

   /**
   * Get awardUri
   * @return awardUri
  **/
  @javax.annotation.Nullable

  public String getAwardUri() {
    return awardUri;
  }


  public void setAwardUri(String awardUri) {
    this.awardUri = awardUri;
  }


  public DoiPropertiesMetadataFundingReferencesInner awardTitle(String awardTitle) {
    
    this.awardTitle = awardTitle;
    return this;
  }

   /**
   * Get awardTitle
   * @return awardTitle
  **/
  @javax.annotation.Nullable

  public String getAwardTitle() {
    return awardTitle;
  }


  public void setAwardTitle(String awardTitle) {
    this.awardTitle = awardTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiPropertiesMetadataFundingReferencesInner doiPropertiesMetadataFundingReferencesInner = (DoiPropertiesMetadataFundingReferencesInner) o;
    return Objects.equals(this.funderName, doiPropertiesMetadataFundingReferencesInner.funderName) &&
        Objects.equals(this.funderIdentifier, doiPropertiesMetadataFundingReferencesInner.funderIdentifier) &&
        Objects.equals(this.funderIdentifierType, doiPropertiesMetadataFundingReferencesInner.funderIdentifierType) &&
        Objects.equals(this.awardNumber, doiPropertiesMetadataFundingReferencesInner.awardNumber) &&
        Objects.equals(this.awardUri, doiPropertiesMetadataFundingReferencesInner.awardUri) &&
        Objects.equals(this.awardTitle, doiPropertiesMetadataFundingReferencesInner.awardTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(funderName, funderIdentifier, funderIdentifierType, awardNumber, awardUri, awardTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiPropertiesMetadataFundingReferencesInner {\n");
    sb.append("    funderName: ").append(toIndentedString(funderName)).append("\n");
    sb.append("    funderIdentifier: ").append(toIndentedString(funderIdentifier)).append("\n");
    sb.append("    funderIdentifierType: ").append(toIndentedString(funderIdentifierType)).append("\n");
    sb.append("    awardNumber: ").append(toIndentedString(awardNumber)).append("\n");
    sb.append("    awardUri: ").append(toIndentedString(awardUri)).append("\n");
    sb.append("    awardTitle: ").append(toIndentedString(awardTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("funderName");
    openapiFields.add("funderIdentifier");
    openapiFields.add("funderIdentifierType");
    openapiFields.add("awardNumber");
    openapiFields.add("awardUri");
    openapiFields.add("awardTitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiPropertiesMetadataFundingReferencesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiPropertiesMetadataFundingReferencesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiPropertiesMetadataFundingReferencesInner is not found in the empty JSON string", DoiPropertiesMetadataFundingReferencesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiPropertiesMetadataFundingReferencesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiPropertiesMetadataFundingReferencesInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("funderName") != null && !jsonObj.get("funderName").isJsonNull()) && !jsonObj.get("funderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funderName").toString()));
      }
      if ((jsonObj.get("funderIdentifier") != null && !jsonObj.get("funderIdentifier").isJsonNull()) && !jsonObj.get("funderIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funderIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funderIdentifier").toString()));
      }
      if ((jsonObj.get("funderIdentifierType") != null && !jsonObj.get("funderIdentifierType").isJsonNull()) && !jsonObj.get("funderIdentifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funderIdentifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funderIdentifierType").toString()));
      }
      if ((jsonObj.get("awardNumber") != null && !jsonObj.get("awardNumber").isJsonNull()) && !jsonObj.get("awardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awardNumber").toString()));
      }
      if ((jsonObj.get("awardUri") != null && !jsonObj.get("awardUri").isJsonNull()) && !jsonObj.get("awardUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awardUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awardUri").toString()));
      }
      if ((jsonObj.get("awardTitle") != null && !jsonObj.get("awardTitle").isJsonNull()) && !jsonObj.get("awardTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awardTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awardTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiPropertiesMetadataFundingReferencesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiPropertiesMetadataFundingReferencesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiPropertiesMetadataFundingReferencesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiPropertiesMetadataFundingReferencesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiPropertiesMetadataFundingReferencesInner>() {
           @Override
           public void write(JsonWriter out, DoiPropertiesMetadataFundingReferencesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiPropertiesMetadataFundingReferencesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiPropertiesMetadataFundingReferencesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiPropertiesMetadataFundingReferencesInner
  * @throws IOException if the JSON string is invalid with respect to DoiPropertiesMetadataFundingReferencesInner
  */
  public static DoiPropertiesMetadataFundingReferencesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiPropertiesMetadataFundingReferencesInner.class);
  }

 /**
  * Convert an instance of DoiPropertiesMetadataFundingReferencesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

