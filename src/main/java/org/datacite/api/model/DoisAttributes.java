/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.datacite.api.model.DoiAttributesAllOfIdentifiers;
import org.datacite.api.model.DoiPropertiesMetadataContainer;
import org.datacite.api.model.DoiPropertiesMetadataContributorsInner;
import org.datacite.api.model.DoiPropertiesMetadataCreatorsInner;
import org.datacite.api.model.DoiPropertiesMetadataDatesInner;
import org.datacite.api.model.DoiPropertiesMetadataDescriptionsInner;
import org.datacite.api.model.DoiPropertiesMetadataFundingReferencesInner;
import org.datacite.api.model.DoiPropertiesMetadataGeoLocationsInner;
import org.datacite.api.model.DoiPropertiesMetadataRelatedIdentifiersInner;
import org.datacite.api.model.DoiPropertiesMetadataRelatedItemsInner;
import org.datacite.api.model.DoiPropertiesMetadataRightsListInner;
import org.datacite.api.model.DoiPropertiesMetadataSubjectsInner;
import org.datacite.api.model.DoiPropertiesMetadataTitlesInner;
import org.datacite.api.model.DoiPropertiesMetadataTypes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoisAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoisAttributes {
  public static final String SERIALIZED_NAME_DOI = "doi";
  @SerializedName(SERIALIZED_NAME_DOI)
  private String doi;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<DoiAttributesAllOfIdentifiers> identifiers = null;

  public static final String SERIALIZED_NAME_CREATORS = "creators";
  @SerializedName(SERIALIZED_NAME_CREATORS)
  private List<DoiPropertiesMetadataCreatorsInner> creators = null;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private List<DoiPropertiesMetadataTitlesInner> titles = null;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private DoiPropertiesMetadataContainer container;

  public static final String SERIALIZED_NAME_PUBLICATION_YEAR = "publicationYear";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_YEAR)
  private Integer publicationYear;

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<DoiPropertiesMetadataSubjectsInner> subjects = null;

  public static final String SERIALIZED_NAME_CONTRIBUTORS = "contributors";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS)
  private List<DoiPropertiesMetadataContributorsInner> contributors = null;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private List<DoiPropertiesMetadataDatesInner> dates = null;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private DoiPropertiesMetadataTypes types;

  public static final String SERIALIZED_NAME_RELATED_IDENTIFIERS = "relatedIdentifiers";
  @SerializedName(SERIALIZED_NAME_RELATED_IDENTIFIERS)
  private List<DoiPropertiesMetadataRelatedIdentifiersInner> relatedIdentifiers = null;

  public static final String SERIALIZED_NAME_RELATED_ITEMS = "relatedItems";
  @SerializedName(SERIALIZED_NAME_RELATED_ITEMS)
  private List<DoiPropertiesMetadataRelatedItemsInner> relatedItems = null;

  public static final String SERIALIZED_NAME_SIZES = "sizes";
  @SerializedName(SERIALIZED_NAME_SIZES)
  private List<String> sizes = null;

  public static final String SERIALIZED_NAME_FORMATS = "formats";
  @SerializedName(SERIALIZED_NAME_FORMATS)
  private List<String> formats = null;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_RIGHTS_LIST = "rightsList";
  @SerializedName(SERIALIZED_NAME_RIGHTS_LIST)
  private List<DoiPropertiesMetadataRightsListInner> rightsList = null;

  public static final String SERIALIZED_NAME_DESCRIPTIONS = "descriptions";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
  private List<DoiPropertiesMetadataDescriptionsInner> descriptions = null;

  public static final String SERIALIZED_NAME_GEO_LOCATIONS = "geoLocations";
  @SerializedName(SERIALIZED_NAME_GEO_LOCATIONS)
  private List<DoiPropertiesMetadataGeoLocationsInner> geoLocations = null;

  public static final String SERIALIZED_NAME_FUNDING_REFERENCES = "fundingReferences";
  @SerializedName(SERIALIZED_NAME_FUNDING_REFERENCES)
  private List<DoiPropertiesMetadataFundingReferencesInner> fundingReferences = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_CONTENT_URL = "contentUrl";
  @SerializedName(SERIALIZED_NAME_CONTENT_URL)
  private List<String> contentUrl = null;

  public static final String SERIALIZED_NAME_METADATA_VERSION = "metadataVersion";
  @SerializedName(SERIALIZED_NAME_METADATA_VERSION)
  private BigDecimal metadataVersion;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private BigDecimal viewCount;

  public static final String SERIALIZED_NAME_DOWNLOAD_COUNT = "downloadCount";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_COUNT)
  private BigDecimal downloadCount;

  public static final String SERIALIZED_NAME_REFERENCE_COUNT = "referenceCount";
  @SerializedName(SERIALIZED_NAME_REFERENCE_COUNT)
  private BigDecimal referenceCount;

  public static final String SERIALIZED_NAME_CITATION_COUNT = "citationCount";
  @SerializedName(SERIALIZED_NAME_CITATION_COUNT)
  private BigDecimal citationCount;

  public static final String SERIALIZED_NAME_PART_COUNT = "partCount";
  @SerializedName(SERIALIZED_NAME_PART_COUNT)
  private BigDecimal partCount;

  public static final String SERIALIZED_NAME_PART_OF_COUNT = "partOfCount";
  @SerializedName(SERIALIZED_NAME_PART_OF_COUNT)
  private BigDecimal partOfCount;

  public static final String SERIALIZED_NAME_VERSION_COUNT = "versionCount";
  @SerializedName(SERIALIZED_NAME_VERSION_COUNT)
  private BigDecimal versionCount;

  public static final String SERIALIZED_NAME_VERSION_OF_COUNT = "versionOfCount";
  @SerializedName(SERIALIZED_NAME_VERSION_OF_COUNT)
  private BigDecimal versionOfCount;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_REGISTERED = "registered";
  @SerializedName(SERIALIZED_NAME_REGISTERED)
  private String registered;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private String published;

  public DoisAttributes() {
  }

  
  public DoisAttributes(
     BigDecimal metadataVersion, 
     String source, 
     Boolean isActive, 
     String state, 
     String reason, 
     BigDecimal viewCount, 
     BigDecimal downloadCount, 
     BigDecimal referenceCount, 
     BigDecimal citationCount, 
     BigDecimal partCount, 
     BigDecimal partOfCount, 
     BigDecimal versionCount, 
     BigDecimal versionOfCount, 
     String created, 
     String registered, 
     String updated, 
     String published
  ) {
    this();
    this.metadataVersion = metadataVersion;
    this.source = source;
    this.isActive = isActive;
    this.state = state;
    this.reason = reason;
    this.viewCount = viewCount;
    this.downloadCount = downloadCount;
    this.referenceCount = referenceCount;
    this.citationCount = citationCount;
    this.partCount = partCount;
    this.partOfCount = partOfCount;
    this.versionCount = versionCount;
    this.versionOfCount = versionOfCount;
    this.created = created;
    this.registered = registered;
    this.updated = updated;
    this.published = published;
  }

  public DoisAttributes doi(String doi) {
    
    this.doi = doi;
    return this;
  }

   /**
   * Get doi
   * @return doi
  **/
  @javax.annotation.Nullable

  public String getDoi() {
    return doi;
  }


  public void setDoi(String doi) {
    this.doi = doi;
  }


  public DoisAttributes identifiers(List<DoiAttributesAllOfIdentifiers> identifiers) {
    
    this.identifiers = identifiers;
    return this;
  }

  public DoisAttributes addIdentifiersItem(DoiAttributesAllOfIdentifiers identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

   /**
   * Get identifiers
   * @return identifiers
  **/
  @javax.annotation.Nullable

  public List<DoiAttributesAllOfIdentifiers> getIdentifiers() {
    return identifiers;
  }


  public void setIdentifiers(List<DoiAttributesAllOfIdentifiers> identifiers) {
    this.identifiers = identifiers;
  }


  public DoisAttributes creators(List<DoiPropertiesMetadataCreatorsInner> creators) {
    
    this.creators = creators;
    return this;
  }

  public DoisAttributes addCreatorsItem(DoiPropertiesMetadataCreatorsInner creatorsItem) {
    if (this.creators == null) {
      this.creators = new ArrayList<>();
    }
    this.creators.add(creatorsItem);
    return this;
  }

   /**
   * Get creators
   * @return creators
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataCreatorsInner> getCreators() {
    return creators;
  }


  public void setCreators(List<DoiPropertiesMetadataCreatorsInner> creators) {
    this.creators = creators;
  }


  public DoisAttributes titles(List<DoiPropertiesMetadataTitlesInner> titles) {
    
    this.titles = titles;
    return this;
  }

  public DoisAttributes addTitlesItem(DoiPropertiesMetadataTitlesInner titlesItem) {
    if (this.titles == null) {
      this.titles = new ArrayList<>();
    }
    this.titles.add(titlesItem);
    return this;
  }

   /**
   * Get titles
   * @return titles
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataTitlesInner> getTitles() {
    return titles;
  }


  public void setTitles(List<DoiPropertiesMetadataTitlesInner> titles) {
    this.titles = titles;
  }


  public DoisAttributes publisher(String publisher) {
    
    this.publisher = publisher;
    return this;
  }

   /**
   * Get publisher
   * @return publisher
  **/
  @javax.annotation.Nonnull

  public String getPublisher() {
    return publisher;
  }


  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public DoisAttributes container(DoiPropertiesMetadataContainer container) {
    
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @javax.annotation.Nullable

  public DoiPropertiesMetadataContainer getContainer() {
    return container;
  }


  public void setContainer(DoiPropertiesMetadataContainer container) {
    this.container = container;
  }


  public DoisAttributes publicationYear(Integer publicationYear) {
    
    this.publicationYear = publicationYear;
    return this;
  }

   /**
   * Get publicationYear
   * @return publicationYear
  **/
  @javax.annotation.Nonnull

  public Integer getPublicationYear() {
    return publicationYear;
  }


  public void setPublicationYear(Integer publicationYear) {
    this.publicationYear = publicationYear;
  }


  public DoisAttributes subjects(List<DoiPropertiesMetadataSubjectsInner> subjects) {
    
    this.subjects = subjects;
    return this;
  }

  public DoisAttributes addSubjectsItem(DoiPropertiesMetadataSubjectsInner subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

   /**
   * Get subjects
   * @return subjects
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataSubjectsInner> getSubjects() {
    return subjects;
  }


  public void setSubjects(List<DoiPropertiesMetadataSubjectsInner> subjects) {
    this.subjects = subjects;
  }


  public DoisAttributes contributors(List<DoiPropertiesMetadataContributorsInner> contributors) {
    
    this.contributors = contributors;
    return this;
  }

  public DoisAttributes addContributorsItem(DoiPropertiesMetadataContributorsInner contributorsItem) {
    if (this.contributors == null) {
      this.contributors = new ArrayList<>();
    }
    this.contributors.add(contributorsItem);
    return this;
  }

   /**
   * Get contributors
   * @return contributors
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataContributorsInner> getContributors() {
    return contributors;
  }


  public void setContributors(List<DoiPropertiesMetadataContributorsInner> contributors) {
    this.contributors = contributors;
  }


  public DoisAttributes dates(List<DoiPropertiesMetadataDatesInner> dates) {
    
    this.dates = dates;
    return this;
  }

  public DoisAttributes addDatesItem(DoiPropertiesMetadataDatesInner datesItem) {
    if (this.dates == null) {
      this.dates = new ArrayList<>();
    }
    this.dates.add(datesItem);
    return this;
  }

   /**
   * Get dates
   * @return dates
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataDatesInner> getDates() {
    return dates;
  }


  public void setDates(List<DoiPropertiesMetadataDatesInner> dates) {
    this.dates = dates;
  }


  public DoisAttributes language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nullable

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public DoisAttributes types(DoiPropertiesMetadataTypes types) {
    
    this.types = types;
    return this;
  }

   /**
   * Get types
   * @return types
  **/
  @javax.annotation.Nullable

  public DoiPropertiesMetadataTypes getTypes() {
    return types;
  }


  public void setTypes(DoiPropertiesMetadataTypes types) {
    this.types = types;
  }


  public DoisAttributes relatedIdentifiers(List<DoiPropertiesMetadataRelatedIdentifiersInner> relatedIdentifiers) {
    
    this.relatedIdentifiers = relatedIdentifiers;
    return this;
  }

  public DoisAttributes addRelatedIdentifiersItem(DoiPropertiesMetadataRelatedIdentifiersInner relatedIdentifiersItem) {
    if (this.relatedIdentifiers == null) {
      this.relatedIdentifiers = new ArrayList<>();
    }
    this.relatedIdentifiers.add(relatedIdentifiersItem);
    return this;
  }

   /**
   * Get relatedIdentifiers
   * @return relatedIdentifiers
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataRelatedIdentifiersInner> getRelatedIdentifiers() {
    return relatedIdentifiers;
  }


  public void setRelatedIdentifiers(List<DoiPropertiesMetadataRelatedIdentifiersInner> relatedIdentifiers) {
    this.relatedIdentifiers = relatedIdentifiers;
  }


  public DoisAttributes relatedItems(List<DoiPropertiesMetadataRelatedItemsInner> relatedItems) {
    
    this.relatedItems = relatedItems;
    return this;
  }

  public DoisAttributes addRelatedItemsItem(DoiPropertiesMetadataRelatedItemsInner relatedItemsItem) {
    if (this.relatedItems == null) {
      this.relatedItems = new ArrayList<>();
    }
    this.relatedItems.add(relatedItemsItem);
    return this;
  }

   /**
   * Get relatedItems
   * @return relatedItems
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataRelatedItemsInner> getRelatedItems() {
    return relatedItems;
  }


  public void setRelatedItems(List<DoiPropertiesMetadataRelatedItemsInner> relatedItems) {
    this.relatedItems = relatedItems;
  }


  public DoisAttributes sizes(List<String> sizes) {
    
    this.sizes = sizes;
    return this;
  }

  public DoisAttributes addSizesItem(String sizesItem) {
    if (this.sizes == null) {
      this.sizes = new ArrayList<>();
    }
    this.sizes.add(sizesItem);
    return this;
  }

   /**
   * Get sizes
   * @return sizes
  **/
  @javax.annotation.Nullable

  public List<String> getSizes() {
    return sizes;
  }


  public void setSizes(List<String> sizes) {
    this.sizes = sizes;
  }


  public DoisAttributes formats(List<String> formats) {
    
    this.formats = formats;
    return this;
  }

  public DoisAttributes addFormatsItem(String formatsItem) {
    if (this.formats == null) {
      this.formats = new ArrayList<>();
    }
    this.formats.add(formatsItem);
    return this;
  }

   /**
   * Get formats
   * @return formats
  **/
  @javax.annotation.Nullable

  public List<String> getFormats() {
    return formats;
  }


  public void setFormats(List<String> formats) {
    this.formats = formats;
  }


  public DoisAttributes version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public DoisAttributes rightsList(List<DoiPropertiesMetadataRightsListInner> rightsList) {
    
    this.rightsList = rightsList;
    return this;
  }

  public DoisAttributes addRightsListItem(DoiPropertiesMetadataRightsListInner rightsListItem) {
    if (this.rightsList == null) {
      this.rightsList = new ArrayList<>();
    }
    this.rightsList.add(rightsListItem);
    return this;
  }

   /**
   * Get rightsList
   * @return rightsList
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataRightsListInner> getRightsList() {
    return rightsList;
  }


  public void setRightsList(List<DoiPropertiesMetadataRightsListInner> rightsList) {
    this.rightsList = rightsList;
  }


  public DoisAttributes descriptions(List<DoiPropertiesMetadataDescriptionsInner> descriptions) {
    
    this.descriptions = descriptions;
    return this;
  }

  public DoisAttributes addDescriptionsItem(DoiPropertiesMetadataDescriptionsInner descriptionsItem) {
    if (this.descriptions == null) {
      this.descriptions = new ArrayList<>();
    }
    this.descriptions.add(descriptionsItem);
    return this;
  }

   /**
   * Get descriptions
   * @return descriptions
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataDescriptionsInner> getDescriptions() {
    return descriptions;
  }


  public void setDescriptions(List<DoiPropertiesMetadataDescriptionsInner> descriptions) {
    this.descriptions = descriptions;
  }


  public DoisAttributes geoLocations(List<DoiPropertiesMetadataGeoLocationsInner> geoLocations) {
    
    this.geoLocations = geoLocations;
    return this;
  }

  public DoisAttributes addGeoLocationsItem(DoiPropertiesMetadataGeoLocationsInner geoLocationsItem) {
    if (this.geoLocations == null) {
      this.geoLocations = new ArrayList<>();
    }
    this.geoLocations.add(geoLocationsItem);
    return this;
  }

   /**
   * Get geoLocations
   * @return geoLocations
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataGeoLocationsInner> getGeoLocations() {
    return geoLocations;
  }


  public void setGeoLocations(List<DoiPropertiesMetadataGeoLocationsInner> geoLocations) {
    this.geoLocations = geoLocations;
  }


  public DoisAttributes fundingReferences(List<DoiPropertiesMetadataFundingReferencesInner> fundingReferences) {
    
    this.fundingReferences = fundingReferences;
    return this;
  }

  public DoisAttributes addFundingReferencesItem(DoiPropertiesMetadataFundingReferencesInner fundingReferencesItem) {
    if (this.fundingReferences == null) {
      this.fundingReferences = new ArrayList<>();
    }
    this.fundingReferences.add(fundingReferencesItem);
    return this;
  }

   /**
   * Get fundingReferences
   * @return fundingReferences
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataFundingReferencesInner> getFundingReferences() {
    return fundingReferences;
  }


  public void setFundingReferences(List<DoiPropertiesMetadataFundingReferencesInner> fundingReferences) {
    this.fundingReferences = fundingReferences;
  }


  public DoisAttributes url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public DoisAttributes contentUrl(List<String> contentUrl) {
    
    this.contentUrl = contentUrl;
    return this;
  }

  public DoisAttributes addContentUrlItem(String contentUrlItem) {
    if (this.contentUrl == null) {
      this.contentUrl = new ArrayList<>();
    }
    this.contentUrl.add(contentUrlItem);
    return this;
  }

   /**
   * Get contentUrl
   * @return contentUrl
  **/
  @javax.annotation.Nullable

  public List<String> getContentUrl() {
    return contentUrl;
  }


  public void setContentUrl(List<String> contentUrl) {
    this.contentUrl = contentUrl;
  }


   /**
   * Get metadataVersion
   * @return metadataVersion
  **/
  @javax.annotation.Nullable

  public BigDecimal getMetadataVersion() {
    return metadataVersion;
  }




  public DoisAttributes schemaVersion(String schemaVersion) {
    
    this.schemaVersion = schemaVersion;
    return this;
  }

   /**
   * Get schemaVersion
   * @return schemaVersion
  **/
  @javax.annotation.Nullable

  public String getSchemaVersion() {
    return schemaVersion;
  }


  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable

  public String getSource() {
    return source;
  }




   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable

  public Boolean getIsActive() {
    return isActive;
  }




   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable

  public String getState() {
    return state;
  }




   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable

  public String getReason() {
    return reason;
  }




   /**
   * Get viewCount
   * @return viewCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getViewCount() {
    return viewCount;
  }




   /**
   * Get downloadCount
   * @return downloadCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getDownloadCount() {
    return downloadCount;
  }




   /**
   * Get referenceCount
   * @return referenceCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getReferenceCount() {
    return referenceCount;
  }




   /**
   * Get citationCount
   * @return citationCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getCitationCount() {
    return citationCount;
  }




   /**
   * Get partCount
   * @return partCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getPartCount() {
    return partCount;
  }




   /**
   * Get partOfCount
   * @return partOfCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getPartOfCount() {
    return partOfCount;
  }




   /**
   * Get versionCount
   * @return versionCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getVersionCount() {
    return versionCount;
  }




   /**
   * Get versionOfCount
   * @return versionOfCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getVersionOfCount() {
    return versionOfCount;
  }




   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable

  public String getCreated() {
    return created;
  }




   /**
   * Get registered
   * @return registered
  **/
  @javax.annotation.Nullable

  public String getRegistered() {
    return registered;
  }




   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable

  public String getUpdated() {
    return updated;
  }




   /**
   * Get published
   * @return published
  **/
  @javax.annotation.Nullable

  public String getPublished() {
    return published;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoisAttributes doisAttributes = (DoisAttributes) o;
    return Objects.equals(this.doi, doisAttributes.doi) &&
        Objects.equals(this.identifiers, doisAttributes.identifiers) &&
        Objects.equals(this.creators, doisAttributes.creators) &&
        Objects.equals(this.titles, doisAttributes.titles) &&
        Objects.equals(this.publisher, doisAttributes.publisher) &&
        Objects.equals(this.container, doisAttributes.container) &&
        Objects.equals(this.publicationYear, doisAttributes.publicationYear) &&
        Objects.equals(this.subjects, doisAttributes.subjects) &&
        Objects.equals(this.contributors, doisAttributes.contributors) &&
        Objects.equals(this.dates, doisAttributes.dates) &&
        Objects.equals(this.language, doisAttributes.language) &&
        Objects.equals(this.types, doisAttributes.types) &&
        Objects.equals(this.relatedIdentifiers, doisAttributes.relatedIdentifiers) &&
        Objects.equals(this.relatedItems, doisAttributes.relatedItems) &&
        Objects.equals(this.sizes, doisAttributes.sizes) &&
        Objects.equals(this.formats, doisAttributes.formats) &&
        Objects.equals(this.version, doisAttributes.version) &&
        Objects.equals(this.rightsList, doisAttributes.rightsList) &&
        Objects.equals(this.descriptions, doisAttributes.descriptions) &&
        Objects.equals(this.geoLocations, doisAttributes.geoLocations) &&
        Objects.equals(this.fundingReferences, doisAttributes.fundingReferences) &&
        Objects.equals(this.url, doisAttributes.url) &&
        Objects.equals(this.contentUrl, doisAttributes.contentUrl) &&
        Objects.equals(this.metadataVersion, doisAttributes.metadataVersion) &&
        Objects.equals(this.schemaVersion, doisAttributes.schemaVersion) &&
        Objects.equals(this.source, doisAttributes.source) &&
        Objects.equals(this.isActive, doisAttributes.isActive) &&
        Objects.equals(this.state, doisAttributes.state) &&
        Objects.equals(this.reason, doisAttributes.reason) &&
        Objects.equals(this.viewCount, doisAttributes.viewCount) &&
        Objects.equals(this.downloadCount, doisAttributes.downloadCount) &&
        Objects.equals(this.referenceCount, doisAttributes.referenceCount) &&
        Objects.equals(this.citationCount, doisAttributes.citationCount) &&
        Objects.equals(this.partCount, doisAttributes.partCount) &&
        Objects.equals(this.partOfCount, doisAttributes.partOfCount) &&
        Objects.equals(this.versionCount, doisAttributes.versionCount) &&
        Objects.equals(this.versionOfCount, doisAttributes.versionOfCount) &&
        Objects.equals(this.created, doisAttributes.created) &&
        Objects.equals(this.registered, doisAttributes.registered) &&
        Objects.equals(this.updated, doisAttributes.updated) &&
        Objects.equals(this.published, doisAttributes.published);
  }

  @Override
  public int hashCode() {
    return Objects.hash(doi, identifiers, creators, titles, publisher, container, publicationYear, subjects, contributors, dates, language, types, relatedIdentifiers, relatedItems, sizes, formats, version, rightsList, descriptions, geoLocations, fundingReferences, url, contentUrl, metadataVersion, schemaVersion, source, isActive, state, reason, viewCount, downloadCount, referenceCount, citationCount, partCount, partOfCount, versionCount, versionOfCount, created, registered, updated, published);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoisAttributes {\n");
    sb.append("    doi: ").append(toIndentedString(doi)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    creators: ").append(toIndentedString(creators)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    publicationYear: ").append(toIndentedString(publicationYear)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    contributors: ").append(toIndentedString(contributors)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    relatedIdentifiers: ").append(toIndentedString(relatedIdentifiers)).append("\n");
    sb.append("    relatedItems: ").append(toIndentedString(relatedItems)).append("\n");
    sb.append("    sizes: ").append(toIndentedString(sizes)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    rightsList: ").append(toIndentedString(rightsList)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("    geoLocations: ").append(toIndentedString(geoLocations)).append("\n");
    sb.append("    fundingReferences: ").append(toIndentedString(fundingReferences)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    contentUrl: ").append(toIndentedString(contentUrl)).append("\n");
    sb.append("    metadataVersion: ").append(toIndentedString(metadataVersion)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    downloadCount: ").append(toIndentedString(downloadCount)).append("\n");
    sb.append("    referenceCount: ").append(toIndentedString(referenceCount)).append("\n");
    sb.append("    citationCount: ").append(toIndentedString(citationCount)).append("\n");
    sb.append("    partCount: ").append(toIndentedString(partCount)).append("\n");
    sb.append("    partOfCount: ").append(toIndentedString(partOfCount)).append("\n");
    sb.append("    versionCount: ").append(toIndentedString(versionCount)).append("\n");
    sb.append("    versionOfCount: ").append(toIndentedString(versionOfCount)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("doi");
    openapiFields.add("identifiers");
    openapiFields.add("creators");
    openapiFields.add("titles");
    openapiFields.add("publisher");
    openapiFields.add("container");
    openapiFields.add("publicationYear");
    openapiFields.add("subjects");
    openapiFields.add("contributors");
    openapiFields.add("dates");
    openapiFields.add("language");
    openapiFields.add("types");
    openapiFields.add("relatedIdentifiers");
    openapiFields.add("relatedItems");
    openapiFields.add("sizes");
    openapiFields.add("formats");
    openapiFields.add("version");
    openapiFields.add("rightsList");
    openapiFields.add("descriptions");
    openapiFields.add("geoLocations");
    openapiFields.add("fundingReferences");
    openapiFields.add("url");
    openapiFields.add("contentUrl");
    openapiFields.add("metadataVersion");
    openapiFields.add("schemaVersion");
    openapiFields.add("source");
    openapiFields.add("isActive");
    openapiFields.add("state");
    openapiFields.add("reason");
    openapiFields.add("viewCount");
    openapiFields.add("downloadCount");
    openapiFields.add("referenceCount");
    openapiFields.add("citationCount");
    openapiFields.add("partCount");
    openapiFields.add("partOfCount");
    openapiFields.add("versionCount");
    openapiFields.add("versionOfCount");
    openapiFields.add("created");
    openapiFields.add("registered");
    openapiFields.add("updated");
    openapiFields.add("published");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("publisher");
    openapiRequiredFields.add("publicationYear");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoisAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoisAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoisAttributes is not found in the empty JSON string", DoisAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoisAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoisAttributes` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DoisAttributes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("doi") != null && !jsonObj.get("doi").isJsonNull()) && !jsonObj.get("doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doi").toString()));
      }
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
        if (jsonArrayidentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
          }

          // validate the optional field `identifiers` (array)
          for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
            DoiAttributesAllOfIdentifiers.validateJsonObject(jsonArrayidentifiers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("creators") != null && !jsonObj.get("creators").isJsonNull()) {
        JsonArray jsonArraycreators = jsonObj.getAsJsonArray("creators");
        if (jsonArraycreators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creators` to be an array in the JSON string but got `%s`", jsonObj.get("creators").toString()));
          }

          // validate the optional field `creators` (array)
          for (int i = 0; i < jsonArraycreators.size(); i++) {
            DoiPropertiesMetadataCreatorsInner.validateJsonObject(jsonArraycreators.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("titles") != null && !jsonObj.get("titles").isJsonNull()) {
        JsonArray jsonArraytitles = jsonObj.getAsJsonArray("titles");
        if (jsonArraytitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("titles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `titles` to be an array in the JSON string but got `%s`", jsonObj.get("titles").toString()));
          }

          // validate the optional field `titles` (array)
          for (int i = 0; i < jsonArraytitles.size(); i++) {
            DoiPropertiesMetadataTitlesInner.validateJsonObject(jsonArraytitles.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        DoiPropertiesMetadataContainer.validateJsonObject(jsonObj.getAsJsonObject("container"));
      }
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull()) {
        JsonArray jsonArraysubjects = jsonObj.getAsJsonArray("subjects");
        if (jsonArraysubjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
          }

          // validate the optional field `subjects` (array)
          for (int i = 0; i < jsonArraysubjects.size(); i++) {
            DoiPropertiesMetadataSubjectsInner.validateJsonObject(jsonArraysubjects.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("contributors") != null && !jsonObj.get("contributors").isJsonNull()) {
        JsonArray jsonArraycontributors = jsonObj.getAsJsonArray("contributors");
        if (jsonArraycontributors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contributors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contributors` to be an array in the JSON string but got `%s`", jsonObj.get("contributors").toString()));
          }

          // validate the optional field `contributors` (array)
          for (int i = 0; i < jsonArraycontributors.size(); i++) {
            DoiPropertiesMetadataContributorsInner.validateJsonObject(jsonArraycontributors.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        JsonArray jsonArraydates = jsonObj.getAsJsonArray("dates");
        if (jsonArraydates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dates` to be an array in the JSON string but got `%s`", jsonObj.get("dates").toString()));
          }

          // validate the optional field `dates` (array)
          for (int i = 0; i < jsonArraydates.size(); i++) {
            DoiPropertiesMetadataDatesInner.validateJsonObject(jsonArraydates.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `types`
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull()) {
        DoiPropertiesMetadataTypes.validateJsonObject(jsonObj.getAsJsonObject("types"));
      }
      if (jsonObj.get("relatedIdentifiers") != null && !jsonObj.get("relatedIdentifiers").isJsonNull()) {
        JsonArray jsonArrayrelatedIdentifiers = jsonObj.getAsJsonArray("relatedIdentifiers");
        if (jsonArrayrelatedIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedIdentifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("relatedIdentifiers").toString()));
          }

          // validate the optional field `relatedIdentifiers` (array)
          for (int i = 0; i < jsonArrayrelatedIdentifiers.size(); i++) {
            DoiPropertiesMetadataRelatedIdentifiersInner.validateJsonObject(jsonArrayrelatedIdentifiers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("relatedItems") != null && !jsonObj.get("relatedItems").isJsonNull()) {
        JsonArray jsonArrayrelatedItems = jsonObj.getAsJsonArray("relatedItems");
        if (jsonArrayrelatedItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedItems` to be an array in the JSON string but got `%s`", jsonObj.get("relatedItems").toString()));
          }

          // validate the optional field `relatedItems` (array)
          for (int i = 0; i < jsonArrayrelatedItems.size(); i++) {
            DoiPropertiesMetadataRelatedItemsInner.validateJsonObject(jsonArrayrelatedItems.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sizes") != null && !jsonObj.get("sizes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizes` to be an array in the JSON string but got `%s`", jsonObj.get("sizes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("formats") != null && !jsonObj.get("formats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `formats` to be an array in the JSON string but got `%s`", jsonObj.get("formats").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("rightsList") != null && !jsonObj.get("rightsList").isJsonNull()) {
        JsonArray jsonArrayrightsList = jsonObj.getAsJsonArray("rightsList");
        if (jsonArrayrightsList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rightsList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rightsList` to be an array in the JSON string but got `%s`", jsonObj.get("rightsList").toString()));
          }

          // validate the optional field `rightsList` (array)
          for (int i = 0; i < jsonArrayrightsList.size(); i++) {
            DoiPropertiesMetadataRightsListInner.validateJsonObject(jsonArrayrightsList.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("descriptions") != null && !jsonObj.get("descriptions").isJsonNull()) {
        JsonArray jsonArraydescriptions = jsonObj.getAsJsonArray("descriptions");
        if (jsonArraydescriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("descriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `descriptions` to be an array in the JSON string but got `%s`", jsonObj.get("descriptions").toString()));
          }

          // validate the optional field `descriptions` (array)
          for (int i = 0; i < jsonArraydescriptions.size(); i++) {
            DoiPropertiesMetadataDescriptionsInner.validateJsonObject(jsonArraydescriptions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("geoLocations") != null && !jsonObj.get("geoLocations").isJsonNull()) {
        JsonArray jsonArraygeoLocations = jsonObj.getAsJsonArray("geoLocations");
        if (jsonArraygeoLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("geoLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `geoLocations` to be an array in the JSON string but got `%s`", jsonObj.get("geoLocations").toString()));
          }

          // validate the optional field `geoLocations` (array)
          for (int i = 0; i < jsonArraygeoLocations.size(); i++) {
            DoiPropertiesMetadataGeoLocationsInner.validateJsonObject(jsonArraygeoLocations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("fundingReferences") != null && !jsonObj.get("fundingReferences").isJsonNull()) {
        JsonArray jsonArrayfundingReferences = jsonObj.getAsJsonArray("fundingReferences");
        if (jsonArrayfundingReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fundingReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fundingReferences` to be an array in the JSON string but got `%s`", jsonObj.get("fundingReferences").toString()));
          }

          // validate the optional field `fundingReferences` (array)
          for (int i = 0; i < jsonArrayfundingReferences.size(); i++) {
            DoiPropertiesMetadataFundingReferencesInner.validateJsonObject(jsonArrayfundingReferences.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contentUrl") != null && !jsonObj.get("contentUrl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentUrl` to be an array in the JSON string but got `%s`", jsonObj.get("contentUrl").toString()));
      }
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("registered") != null && !jsonObj.get("registered").isJsonNull()) && !jsonObj.get("registered").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registered` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registered").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("published") != null && !jsonObj.get("published").isJsonNull()) && !jsonObj.get("published").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoisAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoisAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoisAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoisAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<DoisAttributes>() {
           @Override
           public void write(JsonWriter out, DoisAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoisAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoisAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoisAttributes
  * @throws IOException if the JSON string is invalid with respect to DoisAttributes
  */
  public static DoisAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoisAttributes.class);
  }

 /**
  * Convert an instance of DoisAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

