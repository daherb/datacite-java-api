/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.datacite.api.model.DoiPropertiesMetadataContainer;
import org.datacite.api.model.DoiPropertiesMetadataContributorsInner;
import org.datacite.api.model.DoiPropertiesMetadataCreatorsInner;
import org.datacite.api.model.DoiPropertiesMetadataDatesInner;
import org.datacite.api.model.DoiPropertiesMetadataDescriptionsInner;
import org.datacite.api.model.DoiPropertiesMetadataFundingReferencesInner;
import org.datacite.api.model.DoiPropertiesMetadataGeoLocationsInner;
import org.datacite.api.model.DoiPropertiesMetadataRelatedIdentifiersInner;
import org.datacite.api.model.DoiPropertiesMetadataRelatedItemsInner;
import org.datacite.api.model.DoiPropertiesMetadataRightsListInner;
import org.datacite.api.model.DoiPropertiesMetadataSubjectsInner;
import org.datacite.api.model.DoiPropertiesMetadataTitlesInner;
import org.datacite.api.model.DoiPropertiesMetadataTypes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiPropertiesMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiPropertiesMetadata {
  public static final String SERIALIZED_NAME_CREATORS = "creators";
  @SerializedName(SERIALIZED_NAME_CREATORS)
  private List<DoiPropertiesMetadataCreatorsInner> creators = null;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private List<DoiPropertiesMetadataTitlesInner> titles = null;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private DoiPropertiesMetadataContainer container;

  public static final String SERIALIZED_NAME_PUBLICATION_YEAR = "publicationYear";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_YEAR)
  private Integer publicationYear;

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<DoiPropertiesMetadataSubjectsInner> subjects = null;

  public static final String SERIALIZED_NAME_CONTRIBUTORS = "contributors";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS)
  private List<DoiPropertiesMetadataContributorsInner> contributors = null;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private List<DoiPropertiesMetadataDatesInner> dates = null;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private DoiPropertiesMetadataTypes types;

  public static final String SERIALIZED_NAME_RELATED_IDENTIFIERS = "relatedIdentifiers";
  @SerializedName(SERIALIZED_NAME_RELATED_IDENTIFIERS)
  private List<DoiPropertiesMetadataRelatedIdentifiersInner> relatedIdentifiers = null;

  public static final String SERIALIZED_NAME_RELATED_ITEMS = "relatedItems";
  @SerializedName(SERIALIZED_NAME_RELATED_ITEMS)
  private List<DoiPropertiesMetadataRelatedItemsInner> relatedItems = null;

  public static final String SERIALIZED_NAME_SIZES = "sizes";
  @SerializedName(SERIALIZED_NAME_SIZES)
  private List<String> sizes = null;

  public static final String SERIALIZED_NAME_FORMATS = "formats";
  @SerializedName(SERIALIZED_NAME_FORMATS)
  private List<String> formats = null;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_RIGHTS_LIST = "rightsList";
  @SerializedName(SERIALIZED_NAME_RIGHTS_LIST)
  private List<DoiPropertiesMetadataRightsListInner> rightsList = null;

  public static final String SERIALIZED_NAME_DESCRIPTIONS = "descriptions";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
  private List<DoiPropertiesMetadataDescriptionsInner> descriptions = null;

  public static final String SERIALIZED_NAME_GEO_LOCATIONS = "geoLocations";
  @SerializedName(SERIALIZED_NAME_GEO_LOCATIONS)
  private List<DoiPropertiesMetadataGeoLocationsInner> geoLocations = null;

  public static final String SERIALIZED_NAME_FUNDING_REFERENCES = "fundingReferences";
  @SerializedName(SERIALIZED_NAME_FUNDING_REFERENCES)
  private List<DoiPropertiesMetadataFundingReferencesInner> fundingReferences = null;

  public DoiPropertiesMetadata() {
  }

  public DoiPropertiesMetadata creators(List<DoiPropertiesMetadataCreatorsInner> creators) {
    
    this.creators = creators;
    return this;
  }

  public DoiPropertiesMetadata addCreatorsItem(DoiPropertiesMetadataCreatorsInner creatorsItem) {
    if (this.creators == null) {
      this.creators = new ArrayList<>();
    }
    this.creators.add(creatorsItem);
    return this;
  }

   /**
   * Get creators
   * @return creators
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataCreatorsInner> getCreators() {
    return creators;
  }


  public void setCreators(List<DoiPropertiesMetadataCreatorsInner> creators) {
    this.creators = creators;
  }


  public DoiPropertiesMetadata titles(List<DoiPropertiesMetadataTitlesInner> titles) {
    
    this.titles = titles;
    return this;
  }

  public DoiPropertiesMetadata addTitlesItem(DoiPropertiesMetadataTitlesInner titlesItem) {
    if (this.titles == null) {
      this.titles = new ArrayList<>();
    }
    this.titles.add(titlesItem);
    return this;
  }

   /**
   * Get titles
   * @return titles
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataTitlesInner> getTitles() {
    return titles;
  }


  public void setTitles(List<DoiPropertiesMetadataTitlesInner> titles) {
    this.titles = titles;
  }


  public DoiPropertiesMetadata publisher(String publisher) {
    
    this.publisher = publisher;
    return this;
  }

   /**
   * Get publisher
   * @return publisher
  **/
  @javax.annotation.Nullable

  public String getPublisher() {
    return publisher;
  }


  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public DoiPropertiesMetadata container(DoiPropertiesMetadataContainer container) {
    
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @javax.annotation.Nullable

  public DoiPropertiesMetadataContainer getContainer() {
    return container;
  }


  public void setContainer(DoiPropertiesMetadataContainer container) {
    this.container = container;
  }


  public DoiPropertiesMetadata publicationYear(Integer publicationYear) {
    
    this.publicationYear = publicationYear;
    return this;
  }

   /**
   * Get publicationYear
   * @return publicationYear
  **/
  @javax.annotation.Nullable

  public Integer getPublicationYear() {
    return publicationYear;
  }


  public void setPublicationYear(Integer publicationYear) {
    this.publicationYear = publicationYear;
  }


  public DoiPropertiesMetadata subjects(List<DoiPropertiesMetadataSubjectsInner> subjects) {
    
    this.subjects = subjects;
    return this;
  }

  public DoiPropertiesMetadata addSubjectsItem(DoiPropertiesMetadataSubjectsInner subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

   /**
   * Get subjects
   * @return subjects
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataSubjectsInner> getSubjects() {
    return subjects;
  }


  public void setSubjects(List<DoiPropertiesMetadataSubjectsInner> subjects) {
    this.subjects = subjects;
  }


  public DoiPropertiesMetadata contributors(List<DoiPropertiesMetadataContributorsInner> contributors) {
    
    this.contributors = contributors;
    return this;
  }

  public DoiPropertiesMetadata addContributorsItem(DoiPropertiesMetadataContributorsInner contributorsItem) {
    if (this.contributors == null) {
      this.contributors = new ArrayList<>();
    }
    this.contributors.add(contributorsItem);
    return this;
  }

   /**
   * Get contributors
   * @return contributors
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataContributorsInner> getContributors() {
    return contributors;
  }


  public void setContributors(List<DoiPropertiesMetadataContributorsInner> contributors) {
    this.contributors = contributors;
  }


  public DoiPropertiesMetadata dates(List<DoiPropertiesMetadataDatesInner> dates) {
    
    this.dates = dates;
    return this;
  }

  public DoiPropertiesMetadata addDatesItem(DoiPropertiesMetadataDatesInner datesItem) {
    if (this.dates == null) {
      this.dates = new ArrayList<>();
    }
    this.dates.add(datesItem);
    return this;
  }

   /**
   * Get dates
   * @return dates
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataDatesInner> getDates() {
    return dates;
  }


  public void setDates(List<DoiPropertiesMetadataDatesInner> dates) {
    this.dates = dates;
  }


  public DoiPropertiesMetadata language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nullable

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public DoiPropertiesMetadata types(DoiPropertiesMetadataTypes types) {
    
    this.types = types;
    return this;
  }

   /**
   * Get types
   * @return types
  **/
  @javax.annotation.Nullable

  public DoiPropertiesMetadataTypes getTypes() {
    return types;
  }


  public void setTypes(DoiPropertiesMetadataTypes types) {
    this.types = types;
  }


  public DoiPropertiesMetadata relatedIdentifiers(List<DoiPropertiesMetadataRelatedIdentifiersInner> relatedIdentifiers) {
    
    this.relatedIdentifiers = relatedIdentifiers;
    return this;
  }

  public DoiPropertiesMetadata addRelatedIdentifiersItem(DoiPropertiesMetadataRelatedIdentifiersInner relatedIdentifiersItem) {
    if (this.relatedIdentifiers == null) {
      this.relatedIdentifiers = new ArrayList<>();
    }
    this.relatedIdentifiers.add(relatedIdentifiersItem);
    return this;
  }

   /**
   * Get relatedIdentifiers
   * @return relatedIdentifiers
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataRelatedIdentifiersInner> getRelatedIdentifiers() {
    return relatedIdentifiers;
  }


  public void setRelatedIdentifiers(List<DoiPropertiesMetadataRelatedIdentifiersInner> relatedIdentifiers) {
    this.relatedIdentifiers = relatedIdentifiers;
  }


  public DoiPropertiesMetadata relatedItems(List<DoiPropertiesMetadataRelatedItemsInner> relatedItems) {
    
    this.relatedItems = relatedItems;
    return this;
  }

  public DoiPropertiesMetadata addRelatedItemsItem(DoiPropertiesMetadataRelatedItemsInner relatedItemsItem) {
    if (this.relatedItems == null) {
      this.relatedItems = new ArrayList<>();
    }
    this.relatedItems.add(relatedItemsItem);
    return this;
  }

   /**
   * Get relatedItems
   * @return relatedItems
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataRelatedItemsInner> getRelatedItems() {
    return relatedItems;
  }


  public void setRelatedItems(List<DoiPropertiesMetadataRelatedItemsInner> relatedItems) {
    this.relatedItems = relatedItems;
  }


  public DoiPropertiesMetadata sizes(List<String> sizes) {
    
    this.sizes = sizes;
    return this;
  }

  public DoiPropertiesMetadata addSizesItem(String sizesItem) {
    if (this.sizes == null) {
      this.sizes = new ArrayList<>();
    }
    this.sizes.add(sizesItem);
    return this;
  }

   /**
   * Get sizes
   * @return sizes
  **/
  @javax.annotation.Nullable

  public List<String> getSizes() {
    return sizes;
  }


  public void setSizes(List<String> sizes) {
    this.sizes = sizes;
  }


  public DoiPropertiesMetadata formats(List<String> formats) {
    
    this.formats = formats;
    return this;
  }

  public DoiPropertiesMetadata addFormatsItem(String formatsItem) {
    if (this.formats == null) {
      this.formats = new ArrayList<>();
    }
    this.formats.add(formatsItem);
    return this;
  }

   /**
   * Get formats
   * @return formats
  **/
  @javax.annotation.Nullable

  public List<String> getFormats() {
    return formats;
  }


  public void setFormats(List<String> formats) {
    this.formats = formats;
  }


  public DoiPropertiesMetadata version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public DoiPropertiesMetadata rightsList(List<DoiPropertiesMetadataRightsListInner> rightsList) {
    
    this.rightsList = rightsList;
    return this;
  }

  public DoiPropertiesMetadata addRightsListItem(DoiPropertiesMetadataRightsListInner rightsListItem) {
    if (this.rightsList == null) {
      this.rightsList = new ArrayList<>();
    }
    this.rightsList.add(rightsListItem);
    return this;
  }

   /**
   * Get rightsList
   * @return rightsList
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataRightsListInner> getRightsList() {
    return rightsList;
  }


  public void setRightsList(List<DoiPropertiesMetadataRightsListInner> rightsList) {
    this.rightsList = rightsList;
  }


  public DoiPropertiesMetadata descriptions(List<DoiPropertiesMetadataDescriptionsInner> descriptions) {
    
    this.descriptions = descriptions;
    return this;
  }

  public DoiPropertiesMetadata addDescriptionsItem(DoiPropertiesMetadataDescriptionsInner descriptionsItem) {
    if (this.descriptions == null) {
      this.descriptions = new ArrayList<>();
    }
    this.descriptions.add(descriptionsItem);
    return this;
  }

   /**
   * Get descriptions
   * @return descriptions
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataDescriptionsInner> getDescriptions() {
    return descriptions;
  }


  public void setDescriptions(List<DoiPropertiesMetadataDescriptionsInner> descriptions) {
    this.descriptions = descriptions;
  }


  public DoiPropertiesMetadata geoLocations(List<DoiPropertiesMetadataGeoLocationsInner> geoLocations) {
    
    this.geoLocations = geoLocations;
    return this;
  }

  public DoiPropertiesMetadata addGeoLocationsItem(DoiPropertiesMetadataGeoLocationsInner geoLocationsItem) {
    if (this.geoLocations == null) {
      this.geoLocations = new ArrayList<>();
    }
    this.geoLocations.add(geoLocationsItem);
    return this;
  }

   /**
   * Get geoLocations
   * @return geoLocations
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataGeoLocationsInner> getGeoLocations() {
    return geoLocations;
  }


  public void setGeoLocations(List<DoiPropertiesMetadataGeoLocationsInner> geoLocations) {
    this.geoLocations = geoLocations;
  }


  public DoiPropertiesMetadata fundingReferences(List<DoiPropertiesMetadataFundingReferencesInner> fundingReferences) {
    
    this.fundingReferences = fundingReferences;
    return this;
  }

  public DoiPropertiesMetadata addFundingReferencesItem(DoiPropertiesMetadataFundingReferencesInner fundingReferencesItem) {
    if (this.fundingReferences == null) {
      this.fundingReferences = new ArrayList<>();
    }
    this.fundingReferences.add(fundingReferencesItem);
    return this;
  }

   /**
   * Get fundingReferences
   * @return fundingReferences
  **/
  @javax.annotation.Nullable

  public List<DoiPropertiesMetadataFundingReferencesInner> getFundingReferences() {
    return fundingReferences;
  }


  public void setFundingReferences(List<DoiPropertiesMetadataFundingReferencesInner> fundingReferences) {
    this.fundingReferences = fundingReferences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiPropertiesMetadata doiPropertiesMetadata = (DoiPropertiesMetadata) o;
    return Objects.equals(this.creators, doiPropertiesMetadata.creators) &&
        Objects.equals(this.titles, doiPropertiesMetadata.titles) &&
        Objects.equals(this.publisher, doiPropertiesMetadata.publisher) &&
        Objects.equals(this.container, doiPropertiesMetadata.container) &&
        Objects.equals(this.publicationYear, doiPropertiesMetadata.publicationYear) &&
        Objects.equals(this.subjects, doiPropertiesMetadata.subjects) &&
        Objects.equals(this.contributors, doiPropertiesMetadata.contributors) &&
        Objects.equals(this.dates, doiPropertiesMetadata.dates) &&
        Objects.equals(this.language, doiPropertiesMetadata.language) &&
        Objects.equals(this.types, doiPropertiesMetadata.types) &&
        Objects.equals(this.relatedIdentifiers, doiPropertiesMetadata.relatedIdentifiers) &&
        Objects.equals(this.relatedItems, doiPropertiesMetadata.relatedItems) &&
        Objects.equals(this.sizes, doiPropertiesMetadata.sizes) &&
        Objects.equals(this.formats, doiPropertiesMetadata.formats) &&
        Objects.equals(this.version, doiPropertiesMetadata.version) &&
        Objects.equals(this.rightsList, doiPropertiesMetadata.rightsList) &&
        Objects.equals(this.descriptions, doiPropertiesMetadata.descriptions) &&
        Objects.equals(this.geoLocations, doiPropertiesMetadata.geoLocations) &&
        Objects.equals(this.fundingReferences, doiPropertiesMetadata.fundingReferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creators, titles, publisher, container, publicationYear, subjects, contributors, dates, language, types, relatedIdentifiers, relatedItems, sizes, formats, version, rightsList, descriptions, geoLocations, fundingReferences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiPropertiesMetadata {\n");
    sb.append("    creators: ").append(toIndentedString(creators)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    publicationYear: ").append(toIndentedString(publicationYear)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    contributors: ").append(toIndentedString(contributors)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    relatedIdentifiers: ").append(toIndentedString(relatedIdentifiers)).append("\n");
    sb.append("    relatedItems: ").append(toIndentedString(relatedItems)).append("\n");
    sb.append("    sizes: ").append(toIndentedString(sizes)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    rightsList: ").append(toIndentedString(rightsList)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("    geoLocations: ").append(toIndentedString(geoLocations)).append("\n");
    sb.append("    fundingReferences: ").append(toIndentedString(fundingReferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creators");
    openapiFields.add("titles");
    openapiFields.add("publisher");
    openapiFields.add("container");
    openapiFields.add("publicationYear");
    openapiFields.add("subjects");
    openapiFields.add("contributors");
    openapiFields.add("dates");
    openapiFields.add("language");
    openapiFields.add("types");
    openapiFields.add("relatedIdentifiers");
    openapiFields.add("relatedItems");
    openapiFields.add("sizes");
    openapiFields.add("formats");
    openapiFields.add("version");
    openapiFields.add("rightsList");
    openapiFields.add("descriptions");
    openapiFields.add("geoLocations");
    openapiFields.add("fundingReferences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiPropertiesMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiPropertiesMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiPropertiesMetadata is not found in the empty JSON string", DoiPropertiesMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiPropertiesMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiPropertiesMetadata` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("creators") != null && !jsonObj.get("creators").isJsonNull()) {
        JsonArray jsonArraycreators = jsonObj.getAsJsonArray("creators");
        if (jsonArraycreators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creators` to be an array in the JSON string but got `%s`", jsonObj.get("creators").toString()));
          }

          // validate the optional field `creators` (array)
          for (int i = 0; i < jsonArraycreators.size(); i++) {
            DoiPropertiesMetadataCreatorsInner.validateJsonObject(jsonArraycreators.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("titles") != null && !jsonObj.get("titles").isJsonNull()) {
        JsonArray jsonArraytitles = jsonObj.getAsJsonArray("titles");
        if (jsonArraytitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("titles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `titles` to be an array in the JSON string but got `%s`", jsonObj.get("titles").toString()));
          }

          // validate the optional field `titles` (array)
          for (int i = 0; i < jsonArraytitles.size(); i++) {
            DoiPropertiesMetadataTitlesInner.validateJsonObject(jsonArraytitles.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        DoiPropertiesMetadataContainer.validateJsonObject(jsonObj.getAsJsonObject("container"));
      }
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull()) {
        JsonArray jsonArraysubjects = jsonObj.getAsJsonArray("subjects");
        if (jsonArraysubjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
          }

          // validate the optional field `subjects` (array)
          for (int i = 0; i < jsonArraysubjects.size(); i++) {
            DoiPropertiesMetadataSubjectsInner.validateJsonObject(jsonArraysubjects.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("contributors") != null && !jsonObj.get("contributors").isJsonNull()) {
        JsonArray jsonArraycontributors = jsonObj.getAsJsonArray("contributors");
        if (jsonArraycontributors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contributors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contributors` to be an array in the JSON string but got `%s`", jsonObj.get("contributors").toString()));
          }

          // validate the optional field `contributors` (array)
          for (int i = 0; i < jsonArraycontributors.size(); i++) {
            DoiPropertiesMetadataContributorsInner.validateJsonObject(jsonArraycontributors.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        JsonArray jsonArraydates = jsonObj.getAsJsonArray("dates");
        if (jsonArraydates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dates` to be an array in the JSON string but got `%s`", jsonObj.get("dates").toString()));
          }

          // validate the optional field `dates` (array)
          for (int i = 0; i < jsonArraydates.size(); i++) {
            DoiPropertiesMetadataDatesInner.validateJsonObject(jsonArraydates.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `types`
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull()) {
        DoiPropertiesMetadataTypes.validateJsonObject(jsonObj.getAsJsonObject("types"));
      }
      if (jsonObj.get("relatedIdentifiers") != null && !jsonObj.get("relatedIdentifiers").isJsonNull()) {
        JsonArray jsonArrayrelatedIdentifiers = jsonObj.getAsJsonArray("relatedIdentifiers");
        if (jsonArrayrelatedIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedIdentifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("relatedIdentifiers").toString()));
          }

          // validate the optional field `relatedIdentifiers` (array)
          for (int i = 0; i < jsonArrayrelatedIdentifiers.size(); i++) {
            DoiPropertiesMetadataRelatedIdentifiersInner.validateJsonObject(jsonArrayrelatedIdentifiers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("relatedItems") != null && !jsonObj.get("relatedItems").isJsonNull()) {
        JsonArray jsonArrayrelatedItems = jsonObj.getAsJsonArray("relatedItems");
        if (jsonArrayrelatedItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedItems` to be an array in the JSON string but got `%s`", jsonObj.get("relatedItems").toString()));
          }

          // validate the optional field `relatedItems` (array)
          for (int i = 0; i < jsonArrayrelatedItems.size(); i++) {
            DoiPropertiesMetadataRelatedItemsInner.validateJsonObject(jsonArrayrelatedItems.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sizes") != null && !jsonObj.get("sizes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizes` to be an array in the JSON string but got `%s`", jsonObj.get("sizes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("formats") != null && !jsonObj.get("formats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `formats` to be an array in the JSON string but got `%s`", jsonObj.get("formats").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("rightsList") != null && !jsonObj.get("rightsList").isJsonNull()) {
        JsonArray jsonArrayrightsList = jsonObj.getAsJsonArray("rightsList");
        if (jsonArrayrightsList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rightsList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rightsList` to be an array in the JSON string but got `%s`", jsonObj.get("rightsList").toString()));
          }

          // validate the optional field `rightsList` (array)
          for (int i = 0; i < jsonArrayrightsList.size(); i++) {
            DoiPropertiesMetadataRightsListInner.validateJsonObject(jsonArrayrightsList.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("descriptions") != null && !jsonObj.get("descriptions").isJsonNull()) {
        JsonArray jsonArraydescriptions = jsonObj.getAsJsonArray("descriptions");
        if (jsonArraydescriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("descriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `descriptions` to be an array in the JSON string but got `%s`", jsonObj.get("descriptions").toString()));
          }

          // validate the optional field `descriptions` (array)
          for (int i = 0; i < jsonArraydescriptions.size(); i++) {
            DoiPropertiesMetadataDescriptionsInner.validateJsonObject(jsonArraydescriptions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("geoLocations") != null && !jsonObj.get("geoLocations").isJsonNull()) {
        JsonArray jsonArraygeoLocations = jsonObj.getAsJsonArray("geoLocations");
        if (jsonArraygeoLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("geoLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `geoLocations` to be an array in the JSON string but got `%s`", jsonObj.get("geoLocations").toString()));
          }

          // validate the optional field `geoLocations` (array)
          for (int i = 0; i < jsonArraygeoLocations.size(); i++) {
            DoiPropertiesMetadataGeoLocationsInner.validateJsonObject(jsonArraygeoLocations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("fundingReferences") != null && !jsonObj.get("fundingReferences").isJsonNull()) {
        JsonArray jsonArrayfundingReferences = jsonObj.getAsJsonArray("fundingReferences");
        if (jsonArrayfundingReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fundingReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fundingReferences` to be an array in the JSON string but got `%s`", jsonObj.get("fundingReferences").toString()));
          }

          // validate the optional field `fundingReferences` (array)
          for (int i = 0; i < jsonArrayfundingReferences.size(); i++) {
            DoiPropertiesMetadataFundingReferencesInner.validateJsonObject(jsonArrayfundingReferences.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiPropertiesMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiPropertiesMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiPropertiesMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiPropertiesMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiPropertiesMetadata>() {
           @Override
           public void write(JsonWriter out, DoiPropertiesMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiPropertiesMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiPropertiesMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiPropertiesMetadata
  * @throws IOException if the JSON string is invalid with respect to DoiPropertiesMetadata
  */
  public static DoiPropertiesMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiPropertiesMetadata.class);
  }

 /**
  * Convert an instance of DoiPropertiesMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

