/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox {
  public static final String SERIALIZED_NAME_WEST_BOUND_LONGITUDE = "westBoundLongitude";
  @SerializedName(SERIALIZED_NAME_WEST_BOUND_LONGITUDE)
  private String westBoundLongitude;

  public static final String SERIALIZED_NAME_EAST_BOUND_LONGITUDE = "eastBoundLongitude";
  @SerializedName(SERIALIZED_NAME_EAST_BOUND_LONGITUDE)
  private String eastBoundLongitude;

  public static final String SERIALIZED_NAME_SOUTH_BOUND_LATITUDE = "southBoundLatitude";
  @SerializedName(SERIALIZED_NAME_SOUTH_BOUND_LATITUDE)
  private String southBoundLatitude;

  public static final String SERIALIZED_NAME_NORTH_BOUND_LATITUDE = "northBoundLatitude";
  @SerializedName(SERIALIZED_NAME_NORTH_BOUND_LATITUDE)
  private String northBoundLatitude;

  public DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox() {
  }

  public DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox westBoundLongitude(String westBoundLongitude) {
    
    this.westBoundLongitude = westBoundLongitude;
    return this;
  }

   /**
   * Get westBoundLongitude
   * @return westBoundLongitude
  **/
  @javax.annotation.Nullable

  public String getWestBoundLongitude() {
    return westBoundLongitude;
  }


  public void setWestBoundLongitude(String westBoundLongitude) {
    this.westBoundLongitude = westBoundLongitude;
  }


  public DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox eastBoundLongitude(String eastBoundLongitude) {
    
    this.eastBoundLongitude = eastBoundLongitude;
    return this;
  }

   /**
   * Get eastBoundLongitude
   * @return eastBoundLongitude
  **/
  @javax.annotation.Nullable

  public String getEastBoundLongitude() {
    return eastBoundLongitude;
  }


  public void setEastBoundLongitude(String eastBoundLongitude) {
    this.eastBoundLongitude = eastBoundLongitude;
  }


  public DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox southBoundLatitude(String southBoundLatitude) {
    
    this.southBoundLatitude = southBoundLatitude;
    return this;
  }

   /**
   * Get southBoundLatitude
   * @return southBoundLatitude
  **/
  @javax.annotation.Nullable

  public String getSouthBoundLatitude() {
    return southBoundLatitude;
  }


  public void setSouthBoundLatitude(String southBoundLatitude) {
    this.southBoundLatitude = southBoundLatitude;
  }


  public DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox northBoundLatitude(String northBoundLatitude) {
    
    this.northBoundLatitude = northBoundLatitude;
    return this;
  }

   /**
   * Get northBoundLatitude
   * @return northBoundLatitude
  **/
  @javax.annotation.Nullable

  public String getNorthBoundLatitude() {
    return northBoundLatitude;
  }


  public void setNorthBoundLatitude(String northBoundLatitude) {
    this.northBoundLatitude = northBoundLatitude;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox doiPropertiesMetadataGeoLocationsInnerGeoLocationBox = (DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox) o;
    return Objects.equals(this.westBoundLongitude, doiPropertiesMetadataGeoLocationsInnerGeoLocationBox.westBoundLongitude) &&
        Objects.equals(this.eastBoundLongitude, doiPropertiesMetadataGeoLocationsInnerGeoLocationBox.eastBoundLongitude) &&
        Objects.equals(this.southBoundLatitude, doiPropertiesMetadataGeoLocationsInnerGeoLocationBox.southBoundLatitude) &&
        Objects.equals(this.northBoundLatitude, doiPropertiesMetadataGeoLocationsInnerGeoLocationBox.northBoundLatitude);
  }

  @Override
  public int hashCode() {
    return Objects.hash(westBoundLongitude, eastBoundLongitude, southBoundLatitude, northBoundLatitude);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox {\n");
    sb.append("    westBoundLongitude: ").append(toIndentedString(westBoundLongitude)).append("\n");
    sb.append("    eastBoundLongitude: ").append(toIndentedString(eastBoundLongitude)).append("\n");
    sb.append("    southBoundLatitude: ").append(toIndentedString(southBoundLatitude)).append("\n");
    sb.append("    northBoundLatitude: ").append(toIndentedString(northBoundLatitude)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("westBoundLongitude");
    openapiFields.add("eastBoundLongitude");
    openapiFields.add("southBoundLatitude");
    openapiFields.add("northBoundLatitude");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox is not found in the empty JSON string", DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("westBoundLongitude") != null && !jsonObj.get("westBoundLongitude").isJsonNull()) && !jsonObj.get("westBoundLongitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `westBoundLongitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("westBoundLongitude").toString()));
      }
      if ((jsonObj.get("eastBoundLongitude") != null && !jsonObj.get("eastBoundLongitude").isJsonNull()) && !jsonObj.get("eastBoundLongitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eastBoundLongitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eastBoundLongitude").toString()));
      }
      if ((jsonObj.get("southBoundLatitude") != null && !jsonObj.get("southBoundLatitude").isJsonNull()) && !jsonObj.get("southBoundLatitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `southBoundLatitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("southBoundLatitude").toString()));
      }
      if ((jsonObj.get("northBoundLatitude") != null && !jsonObj.get("northBoundLatitude").isJsonNull()) && !jsonObj.get("northBoundLatitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `northBoundLatitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("northBoundLatitude").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox>() {
           @Override
           public void write(JsonWriter out, DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox
  * @throws IOException if the JSON string is invalid with respect to DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox
  */
  public static DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox.class);
  }

 /**
  * Convert an instance of DoiPropertiesMetadataGeoLocationsInnerGeoLocationBox to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

