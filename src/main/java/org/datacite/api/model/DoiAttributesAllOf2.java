/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.datacite.api.model.DoiAttributesAllOf2LandingPage;
import org.datacite.api.model.DoiAttributesAllOf2ViewsOverTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoiAttributesAllOf2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoiAttributesAllOf2 {
  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private BigDecimal viewCount;

  public static final String SERIALIZED_NAME_VIEWS_OVER_TIME = "viewsOverTime";
  @SerializedName(SERIALIZED_NAME_VIEWS_OVER_TIME)
  private List<DoiAttributesAllOf2ViewsOverTime> viewsOverTime = null;

  public static final String SERIALIZED_NAME_DOWNLOAD_COUNT = "downloadCount";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_COUNT)
  private BigDecimal downloadCount;

  public static final String SERIALIZED_NAME_DOWNLOADS_OVER_TIME = "downloadsOverTime";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS_OVER_TIME)
  private List<DoiAttributesAllOf2ViewsOverTime> downloadsOverTime = null;

  public static final String SERIALIZED_NAME_REFERENCE_COUNT = "referenceCount";
  @SerializedName(SERIALIZED_NAME_REFERENCE_COUNT)
  private BigDecimal referenceCount;

  public static final String SERIALIZED_NAME_CITATION_COUNT = "citationCount";
  @SerializedName(SERIALIZED_NAME_CITATION_COUNT)
  private BigDecimal citationCount;

  public static final String SERIALIZED_NAME_CITATIONS_OVER_TIME = "citationsOverTime";
  @SerializedName(SERIALIZED_NAME_CITATIONS_OVER_TIME)
  private List<DoiAttributesAllOf2ViewsOverTime> citationsOverTime = null;

  public static final String SERIALIZED_NAME_PART_COUNT = "partCount";
  @SerializedName(SERIALIZED_NAME_PART_COUNT)
  private BigDecimal partCount;

  public static final String SERIALIZED_NAME_PART_OF_COUNT = "partOfCount";
  @SerializedName(SERIALIZED_NAME_PART_OF_COUNT)
  private BigDecimal partOfCount;

  public static final String SERIALIZED_NAME_VERSION_COUNT = "versionCount";
  @SerializedName(SERIALIZED_NAME_VERSION_COUNT)
  private BigDecimal versionCount;

  public static final String SERIALIZED_NAME_VERSION_OF_COUNT = "versionOfCount";
  @SerializedName(SERIALIZED_NAME_VERSION_OF_COUNT)
  private BigDecimal versionOfCount;

  public static final String SERIALIZED_NAME_LANDING_PAGE = "landingPage";
  @SerializedName(SERIALIZED_NAME_LANDING_PAGE)
  private DoiAttributesAllOf2LandingPage landingPage;

  public DoiAttributesAllOf2() {
  }

  
  public DoiAttributesAllOf2(
     BigDecimal viewCount, 
     List<DoiAttributesAllOf2ViewsOverTime> viewsOverTime, 
     BigDecimal downloadCount, 
     List<DoiAttributesAllOf2ViewsOverTime> downloadsOverTime, 
     BigDecimal referenceCount, 
     BigDecimal citationCount, 
     List<DoiAttributesAllOf2ViewsOverTime> citationsOverTime, 
     BigDecimal partCount, 
     BigDecimal partOfCount, 
     BigDecimal versionCount, 
     BigDecimal versionOfCount
  ) {
    this();
    this.viewCount = viewCount;
    this.viewsOverTime = viewsOverTime;
    this.downloadCount = downloadCount;
    this.downloadsOverTime = downloadsOverTime;
    this.referenceCount = referenceCount;
    this.citationCount = citationCount;
    this.citationsOverTime = citationsOverTime;
    this.partCount = partCount;
    this.partOfCount = partOfCount;
    this.versionCount = versionCount;
    this.versionOfCount = versionOfCount;
  }

   /**
   * Get viewCount
   * @return viewCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getViewCount() {
    return viewCount;
  }




   /**
   * Get viewsOverTime
   * @return viewsOverTime
  **/
  @javax.annotation.Nullable

  public List<DoiAttributesAllOf2ViewsOverTime> getViewsOverTime() {
    return viewsOverTime;
  }




   /**
   * Get downloadCount
   * @return downloadCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getDownloadCount() {
    return downloadCount;
  }




   /**
   * Get downloadsOverTime
   * @return downloadsOverTime
  **/
  @javax.annotation.Nullable

  public List<DoiAttributesAllOf2ViewsOverTime> getDownloadsOverTime() {
    return downloadsOverTime;
  }




   /**
   * Get referenceCount
   * @return referenceCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getReferenceCount() {
    return referenceCount;
  }




   /**
   * Get citationCount
   * @return citationCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getCitationCount() {
    return citationCount;
  }




   /**
   * Get citationsOverTime
   * @return citationsOverTime
  **/
  @javax.annotation.Nullable

  public List<DoiAttributesAllOf2ViewsOverTime> getCitationsOverTime() {
    return citationsOverTime;
  }




   /**
   * Get partCount
   * @return partCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getPartCount() {
    return partCount;
  }




   /**
   * Get partOfCount
   * @return partOfCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getPartOfCount() {
    return partOfCount;
  }




   /**
   * Get versionCount
   * @return versionCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getVersionCount() {
    return versionCount;
  }




   /**
   * Get versionOfCount
   * @return versionOfCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getVersionOfCount() {
    return versionOfCount;
  }




  public DoiAttributesAllOf2 landingPage(DoiAttributesAllOf2LandingPage landingPage) {
    
    this.landingPage = landingPage;
    return this;
  }

   /**
   * Get landingPage
   * @return landingPage
  **/
  @javax.annotation.Nullable

  public DoiAttributesAllOf2LandingPage getLandingPage() {
    return landingPage;
  }


  public void setLandingPage(DoiAttributesAllOf2LandingPage landingPage) {
    this.landingPage = landingPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoiAttributesAllOf2 doiAttributesAllOf2 = (DoiAttributesAllOf2) o;
    return Objects.equals(this.viewCount, doiAttributesAllOf2.viewCount) &&
        Objects.equals(this.viewsOverTime, doiAttributesAllOf2.viewsOverTime) &&
        Objects.equals(this.downloadCount, doiAttributesAllOf2.downloadCount) &&
        Objects.equals(this.downloadsOverTime, doiAttributesAllOf2.downloadsOverTime) &&
        Objects.equals(this.referenceCount, doiAttributesAllOf2.referenceCount) &&
        Objects.equals(this.citationCount, doiAttributesAllOf2.citationCount) &&
        Objects.equals(this.citationsOverTime, doiAttributesAllOf2.citationsOverTime) &&
        Objects.equals(this.partCount, doiAttributesAllOf2.partCount) &&
        Objects.equals(this.partOfCount, doiAttributesAllOf2.partOfCount) &&
        Objects.equals(this.versionCount, doiAttributesAllOf2.versionCount) &&
        Objects.equals(this.versionOfCount, doiAttributesAllOf2.versionOfCount) &&
        Objects.equals(this.landingPage, doiAttributesAllOf2.landingPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(viewCount, viewsOverTime, downloadCount, downloadsOverTime, referenceCount, citationCount, citationsOverTime, partCount, partOfCount, versionCount, versionOfCount, landingPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoiAttributesAllOf2 {\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    viewsOverTime: ").append(toIndentedString(viewsOverTime)).append("\n");
    sb.append("    downloadCount: ").append(toIndentedString(downloadCount)).append("\n");
    sb.append("    downloadsOverTime: ").append(toIndentedString(downloadsOverTime)).append("\n");
    sb.append("    referenceCount: ").append(toIndentedString(referenceCount)).append("\n");
    sb.append("    citationCount: ").append(toIndentedString(citationCount)).append("\n");
    sb.append("    citationsOverTime: ").append(toIndentedString(citationsOverTime)).append("\n");
    sb.append("    partCount: ").append(toIndentedString(partCount)).append("\n");
    sb.append("    partOfCount: ").append(toIndentedString(partOfCount)).append("\n");
    sb.append("    versionCount: ").append(toIndentedString(versionCount)).append("\n");
    sb.append("    versionOfCount: ").append(toIndentedString(versionOfCount)).append("\n");
    sb.append("    landingPage: ").append(toIndentedString(landingPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("viewCount");
    openapiFields.add("viewsOverTime");
    openapiFields.add("downloadCount");
    openapiFields.add("downloadsOverTime");
    openapiFields.add("referenceCount");
    openapiFields.add("citationCount");
    openapiFields.add("citationsOverTime");
    openapiFields.add("partCount");
    openapiFields.add("partOfCount");
    openapiFields.add("versionCount");
    openapiFields.add("versionOfCount");
    openapiFields.add("landingPage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoiAttributesAllOf2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoiAttributesAllOf2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoiAttributesAllOf2 is not found in the empty JSON string", DoiAttributesAllOf2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoiAttributesAllOf2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoiAttributesAllOf2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("viewsOverTime") != null && !jsonObj.get("viewsOverTime").isJsonNull()) {
        JsonArray jsonArrayviewsOverTime = jsonObj.getAsJsonArray("viewsOverTime");
        if (jsonArrayviewsOverTime != null) {
          // ensure the json data is an array
          if (!jsonObj.get("viewsOverTime").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `viewsOverTime` to be an array in the JSON string but got `%s`", jsonObj.get("viewsOverTime").toString()));
          }

          // validate the optional field `viewsOverTime` (array)
          for (int i = 0; i < jsonArrayviewsOverTime.size(); i++) {
            DoiAttributesAllOf2ViewsOverTime.validateJsonObject(jsonArrayviewsOverTime.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("downloadsOverTime") != null && !jsonObj.get("downloadsOverTime").isJsonNull()) {
        JsonArray jsonArraydownloadsOverTime = jsonObj.getAsJsonArray("downloadsOverTime");
        if (jsonArraydownloadsOverTime != null) {
          // ensure the json data is an array
          if (!jsonObj.get("downloadsOverTime").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `downloadsOverTime` to be an array in the JSON string but got `%s`", jsonObj.get("downloadsOverTime").toString()));
          }

          // validate the optional field `downloadsOverTime` (array)
          for (int i = 0; i < jsonArraydownloadsOverTime.size(); i++) {
            DoiAttributesAllOf2ViewsOverTime.validateJsonObject(jsonArraydownloadsOverTime.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("citationsOverTime") != null && !jsonObj.get("citationsOverTime").isJsonNull()) {
        JsonArray jsonArraycitationsOverTime = jsonObj.getAsJsonArray("citationsOverTime");
        if (jsonArraycitationsOverTime != null) {
          // ensure the json data is an array
          if (!jsonObj.get("citationsOverTime").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `citationsOverTime` to be an array in the JSON string but got `%s`", jsonObj.get("citationsOverTime").toString()));
          }

          // validate the optional field `citationsOverTime` (array)
          for (int i = 0; i < jsonArraycitationsOverTime.size(); i++) {
            DoiAttributesAllOf2ViewsOverTime.validateJsonObject(jsonArraycitationsOverTime.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `landingPage`
      if (jsonObj.get("landingPage") != null && !jsonObj.get("landingPage").isJsonNull()) {
        DoiAttributesAllOf2LandingPage.validateJsonObject(jsonObj.getAsJsonObject("landingPage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoiAttributesAllOf2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoiAttributesAllOf2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoiAttributesAllOf2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoiAttributesAllOf2.class));

       return (TypeAdapter<T>) new TypeAdapter<DoiAttributesAllOf2>() {
           @Override
           public void write(JsonWriter out, DoiAttributesAllOf2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoiAttributesAllOf2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoiAttributesAllOf2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoiAttributesAllOf2
  * @throws IOException if the JSON string is invalid with respect to DoiAttributesAllOf2
  */
  public static DoiAttributesAllOf2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoiAttributesAllOf2.class);
  }

 /**
  * Convert an instance of DoiAttributesAllOf2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

