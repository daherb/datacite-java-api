/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.datacite.JSON;

/**
 * DoisAttributesAllOf1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-04T16:42:13.755252895+02:00[Europe/Prague]")
public class DoisAttributesAllOf1 {
  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private BigDecimal viewCount;

  public static final String SERIALIZED_NAME_DOWNLOAD_COUNT = "downloadCount";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_COUNT)
  private BigDecimal downloadCount;

  public static final String SERIALIZED_NAME_REFERENCE_COUNT = "referenceCount";
  @SerializedName(SERIALIZED_NAME_REFERENCE_COUNT)
  private BigDecimal referenceCount;

  public static final String SERIALIZED_NAME_CITATION_COUNT = "citationCount";
  @SerializedName(SERIALIZED_NAME_CITATION_COUNT)
  private BigDecimal citationCount;

  public static final String SERIALIZED_NAME_PART_COUNT = "partCount";
  @SerializedName(SERIALIZED_NAME_PART_COUNT)
  private BigDecimal partCount;

  public static final String SERIALIZED_NAME_PART_OF_COUNT = "partOfCount";
  @SerializedName(SERIALIZED_NAME_PART_OF_COUNT)
  private BigDecimal partOfCount;

  public static final String SERIALIZED_NAME_VERSION_COUNT = "versionCount";
  @SerializedName(SERIALIZED_NAME_VERSION_COUNT)
  private BigDecimal versionCount;

  public static final String SERIALIZED_NAME_VERSION_OF_COUNT = "versionOfCount";
  @SerializedName(SERIALIZED_NAME_VERSION_OF_COUNT)
  private BigDecimal versionOfCount;

  public DoisAttributesAllOf1() {
  }

  
  public DoisAttributesAllOf1(
     BigDecimal viewCount, 
     BigDecimal downloadCount, 
     BigDecimal referenceCount, 
     BigDecimal citationCount, 
     BigDecimal partCount, 
     BigDecimal partOfCount, 
     BigDecimal versionCount, 
     BigDecimal versionOfCount
  ) {
    this();
    this.viewCount = viewCount;
    this.downloadCount = downloadCount;
    this.referenceCount = referenceCount;
    this.citationCount = citationCount;
    this.partCount = partCount;
    this.partOfCount = partOfCount;
    this.versionCount = versionCount;
    this.versionOfCount = versionOfCount;
  }

   /**
   * Get viewCount
   * @return viewCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getViewCount() {
    return viewCount;
  }




   /**
   * Get downloadCount
   * @return downloadCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getDownloadCount() {
    return downloadCount;
  }




   /**
   * Get referenceCount
   * @return referenceCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getReferenceCount() {
    return referenceCount;
  }




   /**
   * Get citationCount
   * @return citationCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getCitationCount() {
    return citationCount;
  }




   /**
   * Get partCount
   * @return partCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getPartCount() {
    return partCount;
  }




   /**
   * Get partOfCount
   * @return partOfCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getPartOfCount() {
    return partOfCount;
  }




   /**
   * Get versionCount
   * @return versionCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getVersionCount() {
    return versionCount;
  }




   /**
   * Get versionOfCount
   * @return versionOfCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getVersionOfCount() {
    return versionOfCount;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoisAttributesAllOf1 doisAttributesAllOf1 = (DoisAttributesAllOf1) o;
    return Objects.equals(this.viewCount, doisAttributesAllOf1.viewCount) &&
        Objects.equals(this.downloadCount, doisAttributesAllOf1.downloadCount) &&
        Objects.equals(this.referenceCount, doisAttributesAllOf1.referenceCount) &&
        Objects.equals(this.citationCount, doisAttributesAllOf1.citationCount) &&
        Objects.equals(this.partCount, doisAttributesAllOf1.partCount) &&
        Objects.equals(this.partOfCount, doisAttributesAllOf1.partOfCount) &&
        Objects.equals(this.versionCount, doisAttributesAllOf1.versionCount) &&
        Objects.equals(this.versionOfCount, doisAttributesAllOf1.versionOfCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(viewCount, downloadCount, referenceCount, citationCount, partCount, partOfCount, versionCount, versionOfCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoisAttributesAllOf1 {\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    downloadCount: ").append(toIndentedString(downloadCount)).append("\n");
    sb.append("    referenceCount: ").append(toIndentedString(referenceCount)).append("\n");
    sb.append("    citationCount: ").append(toIndentedString(citationCount)).append("\n");
    sb.append("    partCount: ").append(toIndentedString(partCount)).append("\n");
    sb.append("    partOfCount: ").append(toIndentedString(partOfCount)).append("\n");
    sb.append("    versionCount: ").append(toIndentedString(versionCount)).append("\n");
    sb.append("    versionOfCount: ").append(toIndentedString(versionOfCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("viewCount");
    openapiFields.add("downloadCount");
    openapiFields.add("referenceCount");
    openapiFields.add("citationCount");
    openapiFields.add("partCount");
    openapiFields.add("partOfCount");
    openapiFields.add("versionCount");
    openapiFields.add("versionOfCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DoisAttributesAllOf1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DoisAttributesAllOf1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoisAttributesAllOf1 is not found in the empty JSON string", DoisAttributesAllOf1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DoisAttributesAllOf1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoisAttributesAllOf1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoisAttributesAllOf1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoisAttributesAllOf1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoisAttributesAllOf1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoisAttributesAllOf1.class));

       return (TypeAdapter<T>) new TypeAdapter<DoisAttributesAllOf1>() {
           @Override
           public void write(JsonWriter out, DoisAttributesAllOf1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoisAttributesAllOf1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DoisAttributesAllOf1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DoisAttributesAllOf1
  * @throws IOException if the JSON string is invalid with respect to DoisAttributesAllOf1
  */
  public static DoisAttributesAllOf1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoisAttributesAllOf1.class);
  }

 /**
  * Convert an instance of DoisAttributesAllOf1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

