/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api;

import org.datacite.ApiCallback;
import org.datacite.ApiClient;
import org.datacite.ApiException;
import org.datacite.ApiResponse;
import org.datacite.Configuration;
import org.datacite.Pair;
import org.datacite.ProgressRequestBody;
import org.datacite.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.datacite.api.model.Event;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventsGet
     * @param query  (optional)
     * @param subjId  (optional)
     * @param objId  (optional)
     * @param doi  (optional)
     * @param orcid  (optional)
     * @param prefix  (optional)
     * @param subtype  (optional)
     * @param citationType  (optional)
     * @param sourceId  (optional)
     * @param registrantId  (optional)
     * @param relationTypeId  (optional)
     * @param issn  (optional)
     * @param publicationYear  (optional)
     * @param yearMonth  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param pageCursor  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetCall(String query, String subjId, String objId, String doi, String orcid, String prefix, String subtype, String citationType, String sourceId, String registrantId, String relationTypeId, String issn, String publicationYear, String yearMonth, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (subjId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subj-id", subjId));
        }

        if (objId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("obj-id", objId));
        }

        if (doi != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doi", doi));
        }

        if (orcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orcid", orcid));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (subtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subtype", subtype));
        }

        if (citationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("citation-type", citationType));
        }

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source-id", sourceId));
        }

        if (registrantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("registrant-id", registrantId));
        }

        if (relationTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation-type-id", relationTypeId));
        }

        if (issn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issn", issn));
        }

        if (publicationYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publication-year", publicationYear));
        }

        if (yearMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year-month", yearMonth));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[cursor]", pageCursor));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsGetValidateBeforeCall(String query, String subjId, String objId, String doi, String orcid, String prefix, String subtype, String citationType, String sourceId, String registrantId, String relationTypeId, String issn, String publicationYear, String yearMonth, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort, final ApiCallback _callback) throws ApiException {
        return eventsGetCall(query, subjId, objId, doi, orcid, prefix, subtype, citationType, sourceId, registrantId, relationTypeId, issn, publicationYear, yearMonth, pageNumber, pageSize, pageCursor, include, sort, _callback);

    }

    /**
     * Return a list of events.
     * 
     * @param query  (optional)
     * @param subjId  (optional)
     * @param objId  (optional)
     * @param doi  (optional)
     * @param orcid  (optional)
     * @param prefix  (optional)
     * @param subtype  (optional)
     * @param citationType  (optional)
     * @param sourceId  (optional)
     * @param registrantId  (optional)
     * @param relationTypeId  (optional)
     * @param issn  (optional)
     * @param publicationYear  (optional)
     * @param yearMonth  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param pageCursor  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
     </table>
     */
    public Event eventsGet(String query, String subjId, String objId, String doi, String orcid, String prefix, String subtype, String citationType, String sourceId, String registrantId, String relationTypeId, String issn, String publicationYear, String yearMonth, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort) throws ApiException {
        ApiResponse<Event> localVarResp = eventsGetWithHttpInfo(query, subjId, objId, doi, orcid, prefix, subtype, citationType, sourceId, registrantId, relationTypeId, issn, publicationYear, yearMonth, pageNumber, pageSize, pageCursor, include, sort);
        return localVarResp.getData();
    }

    /**
     * Return a list of events.
     * 
     * @param query  (optional)
     * @param subjId  (optional)
     * @param objId  (optional)
     * @param doi  (optional)
     * @param orcid  (optional)
     * @param prefix  (optional)
     * @param subtype  (optional)
     * @param citationType  (optional)
     * @param sourceId  (optional)
     * @param registrantId  (optional)
     * @param relationTypeId  (optional)
     * @param issn  (optional)
     * @param publicationYear  (optional)
     * @param yearMonth  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param pageCursor  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> eventsGetWithHttpInfo(String query, String subjId, String objId, String doi, String orcid, String prefix, String subtype, String citationType, String sourceId, String registrantId, String relationTypeId, String issn, String publicationYear, String yearMonth, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort) throws ApiException {
        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(query, subjId, objId, doi, orcid, prefix, subtype, citationType, sourceId, registrantId, relationTypeId, issn, publicationYear, yearMonth, pageNumber, pageSize, pageCursor, include, sort, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of events. (asynchronously)
     * 
     * @param query  (optional)
     * @param subjId  (optional)
     * @param objId  (optional)
     * @param doi  (optional)
     * @param orcid  (optional)
     * @param prefix  (optional)
     * @param subtype  (optional)
     * @param citationType  (optional)
     * @param sourceId  (optional)
     * @param registrantId  (optional)
     * @param relationTypeId  (optional)
     * @param issn  (optional)
     * @param publicationYear  (optional)
     * @param yearMonth  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param pageCursor  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetAsync(String query, String subjId, String objId, String doi, String orcid, String prefix, String subtype, String citationType, String sourceId, String registrantId, String relationTypeId, String issn, String publicationYear, String yearMonth, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(query, subjId, objId, doi, orcid, prefix, subtype, citationType, sourceId, registrantId, relationTypeId, issn, publicationYear, yearMonth, pageNumber, pageSize, pageCursor, include, sort, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsIdGet
     * @param id Event (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsIdGet(Async)");
        }

        return eventsIdGetCall(id, _callback);

    }

    /**
     * Return an event.
     * 
     * @param id Event (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
     </table>
     */
    public Event eventsIdGet(String id) throws ApiException {
        ApiResponse<Event> localVarResp = eventsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return an event.
     * 
     * @param id Event (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> eventsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = eventsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an event. (asynchronously)
     * 
     * @param id Event (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsIdGetAsync(String id, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
