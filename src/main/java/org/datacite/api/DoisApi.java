/*
 * REST API
 * The REST API is used for all API interactions with DataCite services.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@datacite.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.datacite.api;

import org.datacite.ApiCallback;
import org.datacite.ApiClient;
import org.datacite.ApiException;
import org.datacite.ApiResponse;
import org.datacite.Configuration;
import org.datacite.Pair;
import org.datacite.ProgressRequestBody;
import org.datacite.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.datacite.api.model.Activity;
import org.datacite.api.model.Doi;
import org.datacite.api.model.Dois;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DoisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DoisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DoisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for doisGet
     * @param query  (optional)
     * @param created  (optional)
     * @param registered  (optional)
     * @param published  (optional)
     * @param providerId  (optional)
     * @param clientId  (optional)
     * @param consortiumId  (optional)
     * @param prefix  (optional)
     * @param certificate  (optional)
     * @param affiliationId  (optional)
     * @param resourceTypeId  (optional)
     * @param subject  (optional)
     * @param fieldOfScience  (optional)
     * @param license  (optional)
     * @param schemaVersion  (optional)
     * @param state  (optional)
     * @param affiliation Set affiliation&#x3D;true to see additional affiliation information such as the affiliation identifier that was added in Schema 4.3. (optional)
     * @param linkCheckStatus  (optional)
     * @param random Retreive a random sample of DOIs. When true, the page[number] parameter is ignored. (optional)
     * @param sampleSize  (optional)
     * @param sampleGroup  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param pageCursor  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of dois. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisGetCall(String query, Integer created, Integer registered, Integer published, String providerId, String clientId, String consortiumId, String prefix, String certificate, String affiliationId, String resourceTypeId, String subject, String fieldOfScience, String license, String schemaVersion, String state, Boolean affiliation, String linkCheckStatus, Boolean random, Integer sampleSize, String sampleGroup, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dois";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (registered != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("registered", registered));
        }

        if (published != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published", published));
        }

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider-id", providerId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client-id", clientId));
        }

        if (consortiumId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consortium-id", consortiumId));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (certificate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate", certificate));
        }

        if (affiliationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affiliation-id", affiliationId));
        }

        if (resourceTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource-type-id", resourceTypeId));
        }

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (fieldOfScience != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field-of-science", fieldOfScience));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (schemaVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema-version", schemaVersion));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (affiliation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affiliation", affiliation));
        }

        if (linkCheckStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link-check-status", linkCheckStatus));
        }

        if (random != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("random", random));
        }

        if (sampleSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sample-size", sampleSize));
        }

        if (sampleGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sample-group", sampleGroup));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[cursor]", pageCursor));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doisGetValidateBeforeCall(String query, Integer created, Integer registered, Integer published, String providerId, String clientId, String consortiumId, String prefix, String certificate, String affiliationId, String resourceTypeId, String subject, String fieldOfScience, String license, String schemaVersion, String state, Boolean affiliation, String linkCheckStatus, Boolean random, Integer sampleSize, String sampleGroup, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort, final ApiCallback _callback) throws ApiException {
        return doisGetCall(query, created, registered, published, providerId, clientId, consortiumId, prefix, certificate, affiliationId, resourceTypeId, subject, fieldOfScience, license, schemaVersion, state, affiliation, linkCheckStatus, random, sampleSize, sampleGroup, pageNumber, pageSize, pageCursor, include, sort, _callback);

    }

    /**
     * Return a list of dois.
     * 
     * @param query  (optional)
     * @param created  (optional)
     * @param registered  (optional)
     * @param published  (optional)
     * @param providerId  (optional)
     * @param clientId  (optional)
     * @param consortiumId  (optional)
     * @param prefix  (optional)
     * @param certificate  (optional)
     * @param affiliationId  (optional)
     * @param resourceTypeId  (optional)
     * @param subject  (optional)
     * @param fieldOfScience  (optional)
     * @param license  (optional)
     * @param schemaVersion  (optional)
     * @param state  (optional)
     * @param affiliation Set affiliation&#x3D;true to see additional affiliation information such as the affiliation identifier that was added in Schema 4.3. (optional)
     * @param linkCheckStatus  (optional)
     * @param random Retreive a random sample of DOIs. When true, the page[number] parameter is ignored. (optional)
     * @param sampleSize  (optional)
     * @param sampleGroup  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param pageCursor  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @return Dois
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of dois. </td><td>  -  </td></tr>
     </table>
     */
    public Dois doisGet(String query, Integer created, Integer registered, Integer published, String providerId, String clientId, String consortiumId, String prefix, String certificate, String affiliationId, String resourceTypeId, String subject, String fieldOfScience, String license, String schemaVersion, String state, Boolean affiliation, String linkCheckStatus, Boolean random, Integer sampleSize, String sampleGroup, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort) throws ApiException {
        ApiResponse<Dois> localVarResp = doisGetWithHttpInfo(query, created, registered, published, providerId, clientId, consortiumId, prefix, certificate, affiliationId, resourceTypeId, subject, fieldOfScience, license, schemaVersion, state, affiliation, linkCheckStatus, random, sampleSize, sampleGroup, pageNumber, pageSize, pageCursor, include, sort);
        return localVarResp.getData();
    }

    /**
     * Return a list of dois.
     * 
     * @param query  (optional)
     * @param created  (optional)
     * @param registered  (optional)
     * @param published  (optional)
     * @param providerId  (optional)
     * @param clientId  (optional)
     * @param consortiumId  (optional)
     * @param prefix  (optional)
     * @param certificate  (optional)
     * @param affiliationId  (optional)
     * @param resourceTypeId  (optional)
     * @param subject  (optional)
     * @param fieldOfScience  (optional)
     * @param license  (optional)
     * @param schemaVersion  (optional)
     * @param state  (optional)
     * @param affiliation Set affiliation&#x3D;true to see additional affiliation information such as the affiliation identifier that was added in Schema 4.3. (optional)
     * @param linkCheckStatus  (optional)
     * @param random Retreive a random sample of DOIs. When true, the page[number] parameter is ignored. (optional)
     * @param sampleSize  (optional)
     * @param sampleGroup  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param pageCursor  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;Dois&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of dois. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dois> doisGetWithHttpInfo(String query, Integer created, Integer registered, Integer published, String providerId, String clientId, String consortiumId, String prefix, String certificate, String affiliationId, String resourceTypeId, String subject, String fieldOfScience, String license, String schemaVersion, String state, Boolean affiliation, String linkCheckStatus, Boolean random, Integer sampleSize, String sampleGroup, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort) throws ApiException {
        okhttp3.Call localVarCall = doisGetValidateBeforeCall(query, created, registered, published, providerId, clientId, consortiumId, prefix, certificate, affiliationId, resourceTypeId, subject, fieldOfScience, license, schemaVersion, state, affiliation, linkCheckStatus, random, sampleSize, sampleGroup, pageNumber, pageSize, pageCursor, include, sort, null);
        Type localVarReturnType = new TypeToken<Dois>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of dois. (asynchronously)
     * 
     * @param query  (optional)
     * @param created  (optional)
     * @param registered  (optional)
     * @param published  (optional)
     * @param providerId  (optional)
     * @param clientId  (optional)
     * @param consortiumId  (optional)
     * @param prefix  (optional)
     * @param certificate  (optional)
     * @param affiliationId  (optional)
     * @param resourceTypeId  (optional)
     * @param subject  (optional)
     * @param fieldOfScience  (optional)
     * @param license  (optional)
     * @param schemaVersion  (optional)
     * @param state  (optional)
     * @param affiliation Set affiliation&#x3D;true to see additional affiliation information such as the affiliation identifier that was added in Schema 4.3. (optional)
     * @param linkCheckStatus  (optional)
     * @param random Retreive a random sample of DOIs. When true, the page[number] parameter is ignored. (optional)
     * @param sampleSize  (optional)
     * @param sampleGroup  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param pageCursor  (optional)
     * @param include  (optional)
     * @param sort  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of dois. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisGetAsync(String query, Integer created, Integer registered, Integer published, String providerId, String clientId, String consortiumId, String prefix, String certificate, String affiliationId, String resourceTypeId, String subject, String fieldOfScience, String license, String schemaVersion, String state, Boolean affiliation, String linkCheckStatus, Boolean random, Integer sampleSize, String sampleGroup, Integer pageNumber, Integer pageSize, String pageCursor, String include, String sort, final ApiCallback<Dois> _callback) throws ApiException {

        okhttp3.Call localVarCall = doisGetValidateBeforeCall(query, created, registered, published, providerId, clientId, consortiumId, prefix, certificate, affiliationId, resourceTypeId, subject, fieldOfScience, license, schemaVersion, state, affiliation, linkCheckStatus, random, sampleSize, sampleGroup, pageNumber, pageSize, pageCursor, include, sort, _callback);
        Type localVarReturnType = new TypeToken<Dois>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doisIdActivitiesGet
     * @param id DOI (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisIdActivitiesGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dois/{id}/activities"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doisIdActivitiesGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling doisIdActivitiesGet(Async)");
        }

        return doisIdActivitiesGetCall(id, _callback);

    }

    /**
     * Return activity for a specific DOI.
     * 
     * @param id DOI (required)
     * @return Activity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public Activity doisIdActivitiesGet(String id) throws ApiException {
        ApiResponse<Activity> localVarResp = doisIdActivitiesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return activity for a specific DOI.
     * 
     * @param id DOI (required)
     * @return ApiResponse&lt;Activity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Activity> doisIdActivitiesGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = doisIdActivitiesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Activity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return activity for a specific DOI. (asynchronously)
     * 
     * @param id DOI (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisIdActivitiesGetAsync(String id, final ApiCallback<Activity> _callback) throws ApiException {

        okhttp3.Call localVarCall = doisIdActivitiesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Activity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doisIdDelete
     * @param id DOI (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dois/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doisIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling doisIdDelete(Async)");
        }

        return doisIdDeleteCall(id, _callback);

    }

    /**
     * Delete a doi (for DOIs in draft state only).
     * 
     * @param id DOI (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public void doisIdDelete(String id) throws ApiException {
        doisIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete a doi (for DOIs in draft state only).
     * 
     * @param id DOI (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> doisIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = doisIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a doi (for DOIs in draft state only). (asynchronously)
     * 
     * @param id DOI (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = doisIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for doisIdGet
     * @param id DOI (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dois/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doisIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling doisIdGet(Async)");
        }

        return doisIdGetCall(id, _callback);

    }

    /**
     * Return a doi.
     * 
     * @param id DOI (required)
     * @return Doi
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public Doi doisIdGet(String id) throws ApiException {
        ApiResponse<Doi> localVarResp = doisIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return a doi.
     * 
     * @param id DOI (required)
     * @return ApiResponse&lt;Doi&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Doi> doisIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = doisIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Doi>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a doi. (asynchronously)
     * 
     * @param id DOI (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisIdGetAsync(String id, final ApiCallback<Doi> _callback) throws ApiException {

        okhttp3.Call localVarCall = doisIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Doi>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doisIdPut
     * @param id DOI (required)
     * @param doi  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisIdPutCall(String id, Doi doi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = doi;

        // create path and map variables
        String localVarPath = "/dois/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doisIdPutValidateBeforeCall(String id, Doi doi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling doisIdPut(Async)");
        }

        // verify the required parameter 'doi' is set
        if (doi == null) {
            throw new ApiException("Missing the required parameter 'doi' when calling doisIdPut(Async)");
        }

        return doisIdPutCall(id, doi, _callback);

    }

    /**
     * Update a doi.
     * 
     * @param id DOI (required)
     * @param doi  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void doisIdPut(String id, Doi doi) throws ApiException {
        doisIdPutWithHttpInfo(id, doi);
    }

    /**
     * Update a doi.
     * 
     * @param id DOI (required)
     * @param doi  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> doisIdPutWithHttpInfo(String id, Doi doi) throws ApiException {
        okhttp3.Call localVarCall = doisIdPutValidateBeforeCall(id, doi, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a doi. (asynchronously)
     * 
     * @param id DOI (required)
     * @param doi  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisIdPutAsync(String id, Doi doi, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = doisIdPutValidateBeforeCall(id, doi, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for doisPost
     * @param doi  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisPostCall(Doi doi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = doi;

        // create path and map variables
        String localVarPath = "/dois";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doisPostValidateBeforeCall(Doi doi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'doi' is set
        if (doi == null) {
            throw new ApiException("Missing the required parameter 'doi' when calling doisPost(Async)");
        }

        return doisPostCall(doi, _callback);

    }

    /**
     * Add a new doi.
     * 
     * @param doi  (required)
     * @return Doi
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public Doi doisPost(Doi doi) throws ApiException {
        ApiResponse<Doi> localVarResp = doisPostWithHttpInfo(doi);
        return localVarResp.getData();
    }

    /**
     * Add a new doi.
     * 
     * @param doi  (required)
     * @return ApiResponse&lt;Doi&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Doi> doisPostWithHttpInfo(Doi doi) throws ApiException {
        okhttp3.Call localVarCall = doisPostValidateBeforeCall(doi, null);
        Type localVarReturnType = new TypeToken<Doi>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new doi. (asynchronously)
     * 
     * @param doi  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doisPostAsync(Doi doi, final ApiCallback<Doi> _callback) throws ApiException {

        okhttp3.Call localVarCall = doisPostValidateBeforeCall(doi, _callback);
        Type localVarReturnType = new TypeToken<Doi>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
